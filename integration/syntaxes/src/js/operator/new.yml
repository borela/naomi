%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  # Convetion.
  classIdentifier: |
    [$_[:upper:]]
    [$_[:alnum:]]*

contexts:
  main:
    # new.target
    - match: (new)\s*(\.)\s*(target)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.constant.js.fjsx15
      pop: true
    # Type after new.
    - match: (?xi)new(?=\s+{{commonIdentifier}})
      scope: keyword.operator.word.new.js.fjsx15
      set: [
        optional-tail,
        meta-instance-call-constructor-scope,
        optional-arguments,
        type
      ]
    # Any other expression after the keyword.
    - match: (?i)new\b
      scope: keyword.operator.word.new.js.fjsx15
      set: [
        optional-tail,
        meta-instance-scope,
        optional-expression
      ]

  arguments:
    - include: ~/js/function-call#arguments

  else-pop:
    - match: (?=\S)
      pop: true

  meta-instance-call-constructor-scope:
    - meta_scope: meta.instance.constructor.js.fjsx15
    - meta_content_scope: meta.function-call.constructor.js.fjsx15
    - include: pop-now

  meta-instance-scope:
    - meta_scope: meta.instance.js.fjsx15
    - include: pop-now

  optional-arguments:
    - match: (?=\()
      set: arguments
    - include: else-pop

  optional-expression:
    - include: ~/js/optional-expression

  optional-tail:
    - include: ~/js/expression#optional-tail

  pop-now:
    - match: ""
      pop: true

  type:
    - include: ~/js/core
    # Object before target property.
    - match: (?xi)({{commonIdentifier}})\s*(\.)
      captures:
        1: variable.other.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
    # Class constructors.
    - match: (?x){{classIdentifier}}
      scope: variable.other.type.js.fjsx15
      pop: true
    # Other expressions.
    - include: ~/js/expression
