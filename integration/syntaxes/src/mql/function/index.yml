%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

variables:
  commonIdentifier: |
    [_[:alpha:]]
    [_[:alnum:]]*

  logicalOperators: |
    (?> &&
      | \|\|
      | !
    )

  comparisonOperators: |
    (?> ==
      | !=
      | >=
      | <=
      | >(?!>)
      | <(?!<)
    )

  bitwiseOperators: |
    (?> ~=?
      | &=?
      | \|=?
      | \^=?
      | <<=?
      | >>>=?
      | >>=?
    )

  arithmeticOperators: |
    (?> --
      | -=?
      | \+\+
      | \+=?
      | \*\*
      | \*=?
      | /=?
      | %=?
    )

  functionIdentifier: |
    (?> operator
        (?> {{comparisonOperators}}
          | {{logicalOperators}}
          | {{bitwiseOperators}}
          | {{arithmeticOperators}}
          | =
          | \[\s*]
        )
      | {{commonIdentifier}}
    )

  typeIdentifier: |
    {{commonIdentifier}}
    (?> \s*\*+
      | \s*<.*?>
        (?:\s*\**)
      | \b
    )

contexts:
  main:
    # Member function.
    - match: |
        (?xi)\s*
        (?=\b
          (?:
            (?> virtual
              | static
            )\s+
          )?
          {{typeIdentifier}}
          \s*{{commonIdentifier}}
          ::{{functionIdentifier}}
        )
      set: [
        body,
        parameters,
        name,
        scope-operator,
        class,
        return-type,
        modifier
      ]
    # Free function.
    - match: |
        (?xi)\s*
        (?=\b
          (?:
            (?> virtual
              | static
            )\s+
          )?
          {{typeIdentifier}}
          \s*{{functionIdentifier}}
          \s*\(
        )
      set: [
        body,
        parameters,
        name,
        return-type,
        modifier
      ]

  modifier:
    - match: |
        (?xi)\s*
        ((?> virtual
          | static
        ))
      captures:
        1: >-
          storage.modifier.mql.mql4
          keyword.other.access.mql.mql4
      pop: true
    - match: ""
      pop: true

  return-type:
    - include: ~/mql/type

  class:
    - match: |
        (?xi)\s*
        \b({{commonIdentifier}})\b
      captures:
        1: entity.name.class.mql.mql4
      pop: true

  scope-operator:
    - match: \s*(::)
      captures:
        1: keyword.operator.other.scope.mql.mql4
      pop: true

  name:
    # Special function name.
    - match: |
        (?x)\s*
        ((?> On
            (?> Calculate
              | ChartEvent
              | Deinit
              | Init
              | Start
              | Timer
            )
        ))(?=\s*\()
      captures:
        1: >-
          support.core.mql.mql4
          entity.name.function.mql.mql4
      pop: true
    # Operator functions.
    - match: |
        (?x)\s*
        ((?> operator\s*
          (?> {{comparisonOperators}}
            | {{logicalOperators}}
            | {{bitwiseOperators}}
            | {{arithmeticOperators}}
            | =
            | \[\s*]
          )?
        ))(?=\s*\()
      captures:
        1: >-
          support.core.mql.mql4
          entity.name.function.mql.mql4
      pop: true
    # Common function name.
    - match: |
        (?xi)\s*
        ({{functionIdentifier}})
      captures:
        1: entity.name.function.mql.mql4
      pop: true

  parameters:
    - include: ~/mql/function/parameters

  body:
    - include: ~/mql/function/body
