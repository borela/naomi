%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

variables:
  arrayFunctions: |
    (?> from
      | isArray
    )\b

  dateFunctions: |
    (?> [gs]et
        (?> Date
          | Day
          | FullYear
          | Hours
          | Milliseconds
          | Minutes
          | Month
          | Seconds
          | Time(?>ZoneOffset)
          | UTC
            (?> Date
              | Day
              | FullYear
              | Hours
              | Milliseconds
              | minutes
              | Month
              | Seconds
            )
        )
      | now
      | parse
      | to
        (?> DateString
          | GMTString
          | ISOString
          | JSON
          | Locale
            (?> DateString
              | Format
              | String
              | TimeString
            )
          | Source
          | String
          | TimeString
          | UTCString
          | valueOf
        )
      | UTC
    )\b

  globalFunctions: |
    (?> decodeURI(?:Component)?
      | encodeURI(?:Component)?
      | eval
      | is(?>Finite|NaN)
      | parse(?>Float|Int)
    )\b

  jsonFunctions: |
    (?> parse
      | stringify
    )\b

  mathFunctions: |
    (?> abs
      | acosh?
      | asinh?
      | atan(?>2|h)?
      | cbrt
      | ceil
      | clz32
      | cosh?
      | exp
      | exp(?:m1)?
      | floor
      | fround
      | hypot
      | imul
      | log(?>10|1p|2)?
      | max
      | min
      | pow
      | random
      | round
      | sign
      | sinh?
      | sqrt
      | tanh?
      | trunc
    )\b

  objectFunctions: |
    (?> assign
      | create
      | definePropert(?>ies|y)
      | freeze
      | getOwnProperty(?>Descriptors?|Names|Symbols)
      | getPrototypeOf
      | is(?>Extensible|Frozen|Sealed)?
      | keys
      | preventExtensions
      | seal
      | setPrototypeOf
    )\b

  stringFunctions: |
    (?> from(?>CharCode|CodePoint)
      | char(?>At|CodeAt)
      | codePointAt
      | concat
      | endsWith
      | includes
      | indexOf
      | lastIndexOf
      | localeCompare
      | match
      | normalize
      | pad(?>End|start)
      | repeat
      | replace
      | search
      | slice
      | split
      | substr(?:ing)?
      | to
        (?> Locale(?>Lower|Upper)
          | LowerCase
          | String
          | UpperCase
        )
      | trim(?>Left|Right)?
      | valueOf
      | raw
    )\b

  symbolFunctions: |
    (?> for
      | KeyFor
    )\b

contexts:
  main:
    - include: console
    # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
    - include: constants
    - include: variables
    - include: functions
    - include: function-properties
    - include: import-properties
    - include: fundamental-objects
    - include: numbers-and-dates
    - include: text-processing
    - include: indexed-collections
    - include: keyed-collections
    - include: structured-data
    - include: control-abstraction-objects
    - include: reflection
    - include: internationalization
    - include: web-assembly

  array-property-or-function:
    # Function call.
    - match: (?x){{arrayFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{arrayFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  arguments:
    - include: ~/js/function-call/arguments

  console:
    - match: (console)\s*(\.)
      captures:
        1: support.type.object.console.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: console-property-or-function

  console-property-or-function:
    # error
    - match: error(?=\s*\()
      scope: support.function.console.error.js.fjsx15
      set: [
        console-error-meta-scope,
        arguments
      ]
    - match: error\b
      scope: support.function.console.error.js.fjsx15
      pop: true
    # info
    - match: info(?=\s*\()
      scope: support.function.console.info.js.fjsx15
      set: [
        console-info-meta-scope,
        arguments
      ]
    - match: info\b
      scope: support.function.console.info.js.fjsx15
      pop: true
    # log
    - match: log(?=\s*\()
      scope: support.function.console.log.js.fjsx15
      set: [
        console-log-meta-scope,
        arguments
      ]
    - match: log\b
      scope: support.function.console.log.js.fjsx15
      pop: true
    # warn
    - match: warn(?=\s*\()
      scope: support.function.console.warn.js.fjsx15
      set: [
        console-warn-meta-scope,
        arguments
      ]
    - match: warn\b
      scope: support.function.console.warn.js.fjsx15
      pop: true
    - include: other-property-or-function

  console-error-meta-scope:
    - meta_scope: meta.function-call.console.error.js.fjsx15
    - include: pop-now

  console-info-meta-scope:
    - meta_scope: meta.function-call.console.info.js.fjsx15
    - include: pop-now

  console-log-meta-scope:
    - meta_scope: meta.function-call.console.log.js.fjsx15
    - include: pop-now

  console-warn-meta-scope:
    - meta_scope: meta.function-call.console.warn.js.fjsx15
    - include: pop-now

  constants:
      - match: |
          (?x)
          (?> (false)
            | (Infinity)
            | (NaN)
            | (null)
            | (true)
            | (undefined)
          )\b
        captures:
          1: constant.language.boolean.false.js.fjsx15
          2: constant.language.infinity.js.fjsx15
          3: constant.language.nan.js.fjsx15
          4: constant.language.null.js.fjsx15
          5: constant.language.boolean.true.js.fjsx15
          6: constant.language.undefined.js.fjsx15
        pop: true

  control-abstraction-objects:
    - match: |
        (?x)
        (?> Generator(?:Function)?
          | Promise
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  date-property-or-function:
    # Function call.
    - match: (?x){{dateFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{dateFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  else-pop:
    - match: (?=\S)
      pop: true

  function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - include: pop-now

  functions:
    # Function call.
    - match: (?x){{globalFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{globalFunctions}}
      scope: support.function.js.fjsx15
      pop: true

  fundamental-objects:
    - match: (Object)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: object-property-or-function
    - match: (Symbol)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: symbol-property-or-function
    - match: |
        (?x)
        (?> Boolean
          | Error
          | EvalError
          | Function
          | InternalError
          | Object
          | RangeError
          | ReferenceError
          | Symbol
          | SyntaxError
          | TypeError
          | URIError
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  function-properties:
    - match: |
        (?x)
        (function)
        \s*(\.)
        \s*(sent)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.variable.js.fsjx15
      pop: true

  import-properties:
    - match: |
        (?x)
        (import)
        \s*(\.)
        \s*(meta)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.variable.js.fsjx15
      pop: true

  indexed-collections:
    - match: (Array)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: array-property-or-function
    - match: |
        (?x)
        (?> Array
          | Float(?>32|64)Array
          | Int(?>8|16|32)Array
          | Uint(?>8|16|32)Array
          | Uint8ClampedArray
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  internationalization:
    - match: |
        (?x)
        (Intl)\b
        (?:
          \s*(\.)\s*
          ((?> Collator
            | DateTimeFormat
            | NumberFormat
          ))\b
        )?
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.js.fsjx15
      pop: true

  json-property-or-function:
    # Function call.
    - match: (?x){{jsonFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{jsonFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  keyed-collections:
    - match: |
        (?x)
        (?> Map
          | Set
          | Weak(?>Map|Set)
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  math-property-or-function:
    # Function call.
    - match: (?x){{mathFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{mathFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    # Constants.
    - match: |
        (?x)
        (?> E
          | LN(?>10|2)
          | LOG(?>10E|2E)
          | PI
          | SQRT(?>1_2|2)
        )\b
      scope: support.constant.js.fjsx15
      pop: true
    - include: other-property-or-function

  numbers-and-dates:
    - match: (Date)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: date-property-or-function
    - match: (Math)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: math-property-or-function
    - match: |
        (?x)
        (?> Date
          | Math
          | Number
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  object-property-or-function:
    # Function call.
    - match: (?x){{objectFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{objectFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  other-property-or-function:
    - include: ~/js/operator/other#other-property-or-function

  reflection:
    - match: |
        (?x)
        (?> Proxy
          | Reflect
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  string-property-or-function:
    # Function call.
    - match: (?x){{stringFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{stringFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  structured-data:
    - match: (JSON)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: json-property-or-function
    - match: |
        (?x)
        (?> ArrayBuffer
          | DataView
          | JSON
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  symbol-property-or-function:
    # Function call.
    - match: (?x){{symbolFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Function reference.
    - match: (?x){{symbolFunctions}}
      scope: support.function.js.fjsx15
      pop: true
    - include: other-property-or-function

  text-processing:
    - match: (String)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set: string-property-or-function
    - match: |
        (?x)
        (?> RegExp
          | String
        )\b
      scope: support.type.object.js.fjsx15
      pop: true

  pop-now:
    - match: ""
      pop: true

  variables:
    # super()
    - match: super(?=\s*\()
      scope: variable.language.super.js.fjsx15
      set: [
        function-call-meta-scope,
        arguments
      ]
    # Other variables.
    - match: prototype\b
      scope: variable.language.prototype.js.fjsx15
      pop: true
    - match: super\b
      scope: variable.language.super.js.fjsx15
      pop: true
    - match: this\b
      scope: variable.language.this.js.fjsx15
      pop: true

  web-assembly:
    - match: |
        (?x)
        (WebAssembly)\b
        (?:
          \s*(\.)\s*
          ((?> CompileError
            | Instance
            | LinkError
            | Memory
            | Module
            | RuntimeError
            | Table
          ))\b
        )?
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.js.fsjx15
      pop: true
