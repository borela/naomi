%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  genericArguments: |
    (<
      (?> {{string}}
        | \g<-1>
        | [^<>]
      )*
    >)

  parameters: |
    (\(
      (?> {{string}}
        | \g<-1>
        | [^()]
      )*
    \))

  flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )

  string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )

  flowObject: |
    (\{
      (?> {{string}}
        | \g<-1>
        | [^{}]
      )*
    })

  simpleFlowType: |
    (?> {{string}}
      | {{flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{genericArguments}})?
    (?:\s*\[\s*\])?

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{simpleFlowType}}
        | \g<-1>
      )
    )

  complexType: |
    (?:\?\s*)?
    (
      (?> {{simpleFlowType}}
        | {{flowFunction}}
        | \g<-1>
      )
    )

  multipleTypes: |
    (
      (?> \s*{{flowOperators}}
        | \s*{{complexType}}
        | \g<-1>
      )+
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | \:\s*{{multipleTypes}}
    )

contexts:
  main:
    # Normal.
    - match: |
        (?xi)
        (?=
          {{genericArguments}}?
          {{flowFunction}}
        )
      set: declaration
    # Single parameter.
    - match: |
        (?xi)
        (?=
          {{commonIdentifier}}
          {{genericArguments}}
          \s*=>
          (?!\s*\{)
        )
      set: [
        return,
        meta-parameters,
        optional-tail,
        head
      ]

  declaration:
    # Generic parameters.
    - match: (?=<)
      push: generic-arguments
    # Parameters.
    - match: (?=\()
      set: [
        return,
        parameters
      ]

  generic-arguments:
    - include: ~/facebook-flow/generic/arguments

  head:
    - include: ~/facebook-flow/type-expression#head

  meta-parameters:
    - meta_scope: meta.function.parameters.flow
    - include: pop-now

  optional-tail:
    - include: ~/facebook-flow/type-expression#optional-tail

  optional-type-expression:
    - include: ~/facebook-flow/optional-type-expression

  parameters:
    - include: ~/facebook-flow/function/parameters

  pop-now:
    - match: ""
      pop: true

  return:
    - match: =>
      scope: storage.type.function.arrow.flow
      set: optional-type-expression
