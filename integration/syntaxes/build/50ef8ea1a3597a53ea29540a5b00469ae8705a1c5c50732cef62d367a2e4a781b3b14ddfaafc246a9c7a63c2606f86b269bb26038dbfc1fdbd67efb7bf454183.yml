%YAML 1.2
---
# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
# 
# ##############################################################################
# 
#   This code was auto generated, be aware that changes to this file will be
#   lost on the next build. To contribute, edit the entry point and files
#   requested by it:
# 
#     Naomi/integration/syntaxes/src/jest-snapshot.yml
# 
# ##############################################################################
# ---
#     Statistics:
#       contexts: 956
#       contexts_inlined: 0
#       contexts_removed: 22
#       files: 186
#       variables: 203
#       variables_removed: 20
# ---
name: Jest Snapshot (Naomi)
scope: source.js.jest-snapshot
file_extensions:
  - js.snap
variables:
  1_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  15_genericArguments: |
    (<
      (?> {{15_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  15_parameters: |
    (\(
      (?> {{15_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  15_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  15_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  15_flowObject: |
    (\{
      (?> {{15_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  15_simpleFlowType: |
    (?> {{15_string}}
      | {{15_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{15_genericArguments}})?
    (?:\s*\[\s*\])?
  15_flowFunction: |
    (
      {{15_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{15_simpleFlowType}}
        | \g<-1>
      )
    )
  15_complexType: |
    (?:\?\s*)?
    (
      (?> {{15_simpleFlowType}}
        | {{15_flowFunction}}
        | \g<-1>
      )
    )
  15_multipleTypes: |
    (
      (?> \s*{{15_flowOperators}}
        | \s*{{15_complexType}}
        | \g<-1>
      )+
    )
  15_flowComment: /\*\s*:.*?\*/
  16_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  16_genericArguments: |
    (<
      (?> {{16_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  16_parameters: |
    (\(
      (?> {{16_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  16_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  16_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  16_flowObject: |
    (\{
      (?> {{16_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  16_simpleFlowType: |
    (?> {{16_string}}
      | {{16_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{16_genericArguments}})?
    (?:\s*\[\s*\])?
  16_flowFunction: |
    (
      {{16_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{16_simpleFlowType}}
        | \g<-1>
      )
    )
  16_complexType: |
    (?:\?\s*)?
    (
      (?> {{16_simpleFlowType}}
        | {{16_flowFunction}}
        | \g<-1>
      )
    )
  16_multipleTypes: |
    (
      (?> \s*{{16_flowOperators}}
        | \s*{{16_complexType}}
        | \g<-1>
      )+
    )
  16_flowComment: /\*\s*:.*?\*/
  18_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  21_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  22_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  23_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  23_hexEscapedChar: |
    x[a-f0-9]{2}
  23_unicodeEscapedChar: |
    (?> u[a-f0-9]{4}
      | u\{[a-f0-9]+\}
    )
  23_escapeSequences: |
    \\
    (?> [`\\$bfnrtv]
      | {{23_hexEscapedChar}}
      | {{23_unicodeEscapedChar}}
    )
  24_hexEscapedChar: |
    x[a-f0-9]{2}
  24_unicodeEscapedChar: |
    (?> u[a-f0-9]{4}
      | u\{[a-f0-9]+}
    )
  24_singleQuotedEscapeSequences: |
    \\
    (?> ['\\bfnrtv]
      | {{24_hexEscapedChar}}
      | {{24_unicodeEscapedChar}}
    )
  25_hexEscapedChar: |
    x[a-f0-9]{2}
  25_unicodeEscapedChar: |
    (?> u[a-f0-9]{4}
      | u\{[a-f0-9]+}
    )
  25_doubleQuotedEscapeSequences: |
    \\
    (?> ["\\bfnrtv]
      | {{25_hexEscapedChar}}
      | {{25_unicodeEscapedChar}}
    )
  26_literalDecimal: |
    [0-9][0-9_]*
  26_literalFloat: |
    (?> [0-9]*[.]{{26_literalDecimal}}
      | {{26_literalDecimal}}[.][0-9]*
    )
  26_scientificNotation: |
    (
      (?> {{26_literalFloat}}
        | {{26_literalDecimal}}
      )
      [e][+-]?
      {{26_literalDecimal}}
    )
  28_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  28_constantIdentifier: |
    [$_[:upper:]]
    [$_[:upper:][:digit:]]*
  29_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  38_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  41_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  41_constantIdentifier: |
    [$_[:upper:]]
    [$_[:upper:][:digit:]]*
  42_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  42_genericArguments: |
    (<
      (?> {{42_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  42_parameters: |
    (\(
      (?> {{42_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  42_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  42_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  42_flowObject: |
    (\{
      (?> {{42_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  42_simpleFlowType: |
    (?> {{42_string}}
      | {{42_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{42_genericArguments}})?
    (?:\s*\[\s*\])?
  42_flowFunction: |
    (
      {{42_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{42_simpleFlowType}}
        | \g<-1>
      )
    )
  42_complexType: |
    (?:\?\s*)?
    (
      (?> {{42_simpleFlowType}}
        | {{42_flowFunction}}
        | \g<-1>
      )
    )
  42_multipleTypes: |
    (
      (?> \s*{{42_flowOperators}}
        | \s*{{42_complexType}}
        | \g<-1>
      )+
    )
  42_flowComment: /\*\s*:.*?\*/
  42_type: |
    (?> {{42_flowComment}}
      | \:\s*{{42_multipleTypes}}
    )
  42_normalArrowFunction: |
    (?:async\b\s*)?
    (?:{{42_genericArguments}}\s*)?
    {{42_parameters}}
    (?:\s*{{42_type}})?
    \s*=>
  42_singleParameterArrowFunction: |
    (?:async\b\s+)?
    {{42_commonIdentifier}}
    (?:\s*{{42_type}})?
    \s*=>
  42_normalArrowFunctionAssignedToVariable: |
    {{42_commonIdentifier}}
    (?:\s*{{42_type}})?
    \s*=\s*
    {{42_normalArrowFunction}}
  42_singleParameterArrowFunctionAssignedToVariable: |
    {{42_commonIdentifier}}
    (?:\s*{{42_type}})?
    \s*=\s*
    {{42_singleParameterArrowFunction}}
  43_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  44_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  44_genericArguments: |
    (<
      (?> {{44_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  44_parameters: |
    (\(
      (?> {{44_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  44_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  44_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  44_flowObject: |
    (\{
      (?> {{44_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  44_simpleFlowType: |
    (?> {{44_string}}
      | {{44_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{44_genericArguments}})?
    (?:\s*\[\s*\])?
  44_flowFunction: |
    (
      {{44_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{44_simpleFlowType}}
        | \g<-1>
      )
    )
  44_complexType: |
    (?:\?\s*)?
    (
      (?> {{44_simpleFlowType}}
        | {{44_flowFunction}}
        | \g<-1>
      )
    )
  44_multipleTypes: |
    (
      (?> \s*{{44_flowOperators}}
        | \s*{{44_complexType}}
        | \g<-1>
      )+
    )
  44_flowComment: /\*\s*:.*?\*/
  44_type: |
    (?> {{44_flowComment}}
      | \:\s*{{44_multipleTypes}}
    )
  55_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  57_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  59_arrayFunctions: |
    (?> from
      | isArray
    )\b
  59_dateFunctions: |
    (?> [gs]et
        (?> Date
          | Day
          | FullYear
          | Hours
          | Milliseconds
          | Minutes
          | Month
          | Seconds
          | Time(?>ZoneOffset)
          | UTC
            (?> Date
              | Day
              | FullYear
              | Hours
              | Milliseconds
              | minutes
              | Month
              | Seconds
            )
        )
      | now
      | parse
      | to
        (?> DateString
          | GMTString
          | ISOString
          | JSON
          | Locale
            (?> DateString
              | Format
              | String
              | TimeString
            )
          | Source
          | String
          | TimeString
          | UTCString
          | valueOf
        )
      | UTC
    )\b
  59_globalFunctions: |
    (?> decodeURI(?:Component)?
      | encodeURI(?:Component)?
      | eval
      | is(?>Finite|NaN)
      | parse(?>Float|Int)
    )\b
  59_jsonFunctions: |
    (?> parse
      | stringify
    )\b
  59_mathFunctions: |
    (?> abs
      | acosh?
      | asinh?
      | atan(?>2|h)?
      | cbrt
      | ceil
      | clz32
      | cosh?
      | exp
      | exp(?:m1)?
      | floor
      | fround
      | hypot
      | imul
      | log(?>10|1p|2)?
      | max
      | min
      | pow
      | random
      | round
      | sign
      | sinh?
      | sqrt
      | tanh?
      | trunc
    )\b
  59_objectFunctions: |
    (?> assign
      | create
      | definePropert(?>ies|y)
      | freeze
      | getOwnProperty(?>Descriptors?|Names|Symbols)
      | getPrototypeOf
      | is(?>Extensible|Frozen|Sealed)?
      | keys
      | preventExtensions
      | seal
      | setPrototypeOf
    )\b
  59_stringFunctions: |
    (?> from(?>CharCode|CodePoint)
      | char(?>At|CodeAt)
      | codePointAt
      | concat
      | endsWith
      | includes
      | indexOf
      | lastIndexOf
      | localeCompare
      | match
      | normalize
      | pad(?>End|start)
      | repeat
      | replace
      | search
      | slice
      | split
      | substr(?:ing)?
      | to
        (?> Locale(?>Lower|Upper)
          | LowerCase
          | String
          | UpperCase
        )
      | trim(?>Left|Right)?
      | valueOf
      | raw
    )\b
  59_symbolFunctions: |
    (?> for
      | KeyFor
    )\b
  61_constantIdentifier: |
    [$_[:upper:]]
    [$_[:upper:][:digit:]]*
  62_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  62_comment: /\*.*?\*/
  62_genericArguments: |
    (<
      (?> {{62_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  62_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  67_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  68_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  70_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  71_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  71_indexer: |
    (\[
      (?> {{71_string}}
        | \g<-1>
        | [^\[\]]
      )*
    \])
  71_methodIdentifier: |
    (?> {{71_string}}
      | {{71_indexer}}
      | {{71_commonIdentifier}}
    )
  71_genericParameters: |
    (<
      (?> {{71_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  71_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  73_propTypeFunctions: |
    (?:
      (React)
      \s*(\.)\s*
    )?
    (PropTypes)
    \s*(\.)\s*
    ((?> arrayOf
      | instanceOf
      | oneOf(?:Type)?
      | shape
    ))\b
  73_reactFunctions: |
    (React)
    \s*(\.)\s*
    ((?> createElement
      | createFactory
      | cloneElement
      | isValidElement
    ))\b
  73_reactDomFunctions: |
    (ReactD[oO][mM])
    \s*(\.)\s*
    ((?> findDOMNode
      | render(?:ToS(?>taticMarkup|tring))?
      | unmountComponentAtNode
    ))\b
  74_decoratorIdentifier: |
    [$._[:alpha:]]
    [$._[:alnum:]]*
  77_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  78_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  79_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  80_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  81_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  81_genericArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)
  82_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  84_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  86_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  86_keyIdentifier: |
    (?> {{86_string}}
      | [$_[:alnum:]]
        [$_[:alnum:]]*
    )
  86_genericArguments: |
    (<
      (?> {{86_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  86_parameters: |
    (\(
      (?> {{86_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  86_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  86_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  86_flowObject: |
    (\{
      (?> {{86_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  86_simpleFlowType: |
    (?> {{86_string}}
      | {{86_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{86_genericArguments}})?
    (?:\s*\[\s*\])?
  86_flowFunction: |
    (
      {{86_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{86_simpleFlowType}}
        | \g<-1>
      )
    )
  86_complexType: |
    (?:\?\s*)?
    (
      (?> {{86_simpleFlowType}}
        | {{86_flowFunction}}
        | \g<-1>
      )
    )
  86_multipleTypes: |
    (
      (?> \s*{{86_flowOperators}}
        | \s*{{86_complexType}}
        | \g<-1>
      )+
    )
  86_flowComment: /\*\s*:.*?\*/
  86_type: |
    (?> {{86_flowComment}}
      | \:\s*{{86_multipleTypes}}
    )
  86_normalArrowFunction: |
    (?:async\b\s*)?
    (?:{{86_genericArguments}}\s*)?
    {{86_parameters}}
    (?:\s*{{86_type}})?
    \s*=>
  86_singleParameterArrowFunction: |
    (?:async\b\s+)?
    {{86_commonIdentifier}}
    (?:\s*{{86_type}})?
    \s*=>
  87_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  87_genericArguments: |
    (<
      (?> {{87_string}}
        | \g<-1>
        | [^<>]
      )*
    >)
  87_parameters: |
    (\(
      (?> {{87_string}}
        | \g<-1>
        | [^()]
      )*
    \))
  87_flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )
  87_string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )
  87_flowObject: |
    (\{
      (?> {{87_string}}
        | \g<-1>
        | [^{}]
      )*
    })
  87_simpleFlowType: |
    (?> {{87_string}}
      | {{87_flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{87_genericArguments}})?
    (?:\s*\[\s*\])?
  87_flowFunction: |
    (
      {{87_parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{87_simpleFlowType}}
        | \g<-1>
      )
    )
  87_complexType: |
    (?:\?\s*)?
    (
      (?> {{87_simpleFlowType}}
        | {{87_flowFunction}}
        | \g<-1>
      )
    )
  87_multipleTypes: |
    (
      (?> \s*{{87_flowOperators}}
        | \s*{{87_complexType}}
        | \g<-1>
      )+
    )
  87_flowComment: /\*\s*:.*?\*/
  87_type: |
    (?> {{87_flowComment}}
      | \:\s*{{87_multipleTypes}}
    )
  87_normalArrowFunction: |
    (?:async\b\s*)?
    (?:{{87_genericArguments}}\s*)?
    {{87_parameters}}
    (?:\s*{{87_type}})?
    \s*=>
  87_singleParameterArrowFunction: |
    (?:async\b\s+)?
    {{87_commonIdentifier}}
    (?:\s*{{87_type}})?
    \s*=>
  89_globalFunctions: |
    (?> (?>clear|set)Immediate
      | require
    )\b
  89_processFunctions: |
    (?> abort
      | chdir
      | cpuUsage
      | cwd
      | disconnect
      | emitWarning
      | exit
      # getegid, geteuid, getgid, getuid, getgroups
      | get(?>e[gu]id|[gu]id|groups)
      | hrtime
      | initgroups
      | kill
      | memoryUsage
      | nextTick
      | send
      # setegid, seteuid, setgid, setuid, setgroups
      | set(?>e[gu]id|[gu]id|groups)
      # umask, uptime
      | u(?>mask|ptime)
    )\b
  93_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  94_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  94_classIdentifier: |
    [$_[:upper:]]
    [$_[:alnum:]]*
  105_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  106_commonIdentifier: |
    [$_[:alpha:]]
    [$_.:[:alnum:]]*
  107_commonIdentifier: |
    [$_[:alpha:]]
    [$_.:[:alnum:]]*
  108_elementIdentifier: |
    [$_[:alpha:]]
    [$_.[:alnum:]\-]*
  108_namespaceIdentifier: '{{108_elementIdentifier}}'
  111_componentIdentifier: |
    [[:upper:]]
    [$_.:[:alnum:]]*
  111_namespaceIdentifier: |
    [$_[:alpha:]]
    [$_.[:alnum:]\-]*
  113_attributeIdentifier: |
    [_[:alpha:]]
    [_.[:alnum:]\-]*
  125_possibleRange: |
    (?> \w
      | \d
      | \\
        (?> c[A-Z]
          | x[\da-fA-F]{2}
          | u[\da-fA-F]{4}
        )
    )
  129_commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  132_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  132_customProperty: --[_[:alnum:]\-]+
  137_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  137_customProperty: (--)([_[:alnum:]\-]*)
  137_coreProperties: |
    (?> additive-symbols
      # align-content, align-items, align-self
      | align-(?>content|items|self)
      | alignment-baseline
      | all
      | animation
        (?:-
          # animation-delay
          (?> delay
            # anmation-direction
            | direction
            # animation-duration
            | duration
            # animation-fill-mode
            | fill-mode
            # aniation-iteration-count
            | iteration-count
            # aniamtion-name
            | name
            # animation-play-state
            | play-state
            # animation-timing-functin
            | timing-function
          )
        )?
      | appearance
      | azimuth
      | background
        (?:-
          # background-attachment
          (?> attachment
            # background-blend-mode
            | blend-mode
            # background-clip
            | clip
            # background-color
            | color
            # background-image, background-image-transform
            | image(?:-transform)?
            # background-origin
            | origin
            # background-position
            | position
            # background-repeat
            | repeat
            # background-size
            | size
          )
        )?
      | baseline-shift
      | block-
        # block-size
        (?> size
          # block-step
          | step
            # block-step-align, block-step-insert, block-steap-round,
            # block-step-size
            (?:-(?>align|insert|round|size))?
        )
      # bookmark-label, bookmark-level, bookmark-state
      | bookmark-(?>label|level|state)
      | border
        (?:-
          # border-block
          (?> block
              (?:-
                # border-block-color
                (?> color
                  # border-block-end, border-block-end-color,
                  # border-block-end-style, border-block-end-width
                  | end(?:-(?>color|style|width))?
                  # border-block-start, border-block-start-color,
                  # border-block-start-style, border-block-start-width
                  | start(?:-(?>color|style|width))?
                  # border-block-style
                  | style
                  # border-block-width
                  | width
                )
              )?
            # border-bottom
            | bottom
              (?:-
                # border-bottom-color
                (?> color
                  # border-bottom-left-radius
                  | left-radius
                  # border-bottom-right-radius
                  | right-radius
                  # border-bottom-style
                  | style
                  # border-bottom-width
                  | width
                )
              )?
            # border-boundary
            | boundary
            # border-collapse
            | collapse
            # border-color
            | color
            # border-image
            | image
              (?:-
                # border-image-outset
                (?> outset
                  # border-image-repeat
                  | repeat
                  # border-image-slice
                  | slice
                  # border-image-source
                  | source
                  # border-image-transform
                  | transform
                  # border-image-width
                  | width
                )
              )?
            # border-inline
            | inline
              (?:-
                # border-inline-color
                (?> color
                  # border-inline-end, border-inline-end-color,
                  # border-inline-end-style, border-inline-end-width
                  | end(?:-(?>color|style|width))?
                  # border-inline-start, border-inline-start-color,
                  # border-inline-start-style, border-inline-start-width
                  | start(?:-(?>color|style|width))?
                  # border-inline-style
                  | style
                  # border-inline-width
                  | width
                )
              )?
            # border-left
            | left
              (?:-
                # border-left-color
                (?> color
                  # border-left-style
                  | style
                  # border-left-width
                  | width
                )
              )?
            # border-right
            | right
              (?:-
                # border-right-color
                (?> color
                  # border-right-style
                  | style
                  # border-right-width
                  | width
                )
              )?
            # border-radius
            | radius
            # border-style
            | style
            # border-spacing
            | spacing
            # border-top
            | top
              (?:-
                # border-top-color
                (?> color
                  # border-top-left-radius
                  | left-radius
                  # border-top-right-radius
                  | right-radius
                  # border-top-style
                  | style
                  # border-top-width
                  | width
                )
              )?
            # border-width
            | width
          )
        )?
      | bottom
      # box-decoration-break, box-shadow, box-sizing, box-snap
      | box-(?>decoration-break|shadow|sizing|snap)
      # break-after, break-before, break-inside
      | break(?:-(?>after|before|inside))?
      | caption-side
      # caret, caret-color, caret-shape
      | caret(?:-(?>color|shape))?
      | chains
      | clear
      # clip, clip-path, clip-rule
      | clip(?:-(?>path|rule))?
      # color, color-adjust, color-interpolation-filters
      | color(?:-(?>adjust|interpolation-filters))?
      | column
        # colums
        (?> s
          | -
            # column-count
            (?> count
              # column-fill
              | fill
              # column-gap
              | gap
              # column-rule, column-rule-color, column-rule-style,
              # column-rule-width
              | rule(?:-(?>color|style|width))?
              # column-span
              | span
              # column-width
              | width
            )
        )
      | contain
      | content
      | continue
      # counter-increment, counter-reset, counter-set
      | counter(?:-(?>increment|reset|set))
      # cue, cue-after, cue-before
      | cue(?:-(?>after|before))?
      | cursor
      | direction
      | display
      | dominant-baseline
      | elevation
      | empty-cells
      | fallback
      | fill
        (?:-
          # fill-break
          (?> break
            # fill-color
            | color
            # fill-image
            | image
            # fill-opacity
            | opacity
            # fill-origin
            | origin
            # fill-position
            | position
            # fill-repeat
            | repeat
            # fill-rule
            | rule
            # fill-size
            | size
          )
        )?
      | filter
      # flex, flex-basis, flex-direction, flex-flow, flex-grow, flex-shrink,
      # flex-wrap
      | flex(?:-(?>basis|direction|flow|grow|shrink|wrap))?
      # float, float-defer, float-offset, float-reference
      | float(?:-(?>defer|offset|reference))?
      # flood-color, flood-opacity
      | flood-(?>color|opacity)
      # flow, flow-from, flow-into
      | flow(?:-(?>from|into))?
      | font
        (?:-
          # font-family
          (?> family
            # font-feature-settings
            | feature-settings
            # font-kerning
            | kerning
            # font-language-override
            | language-override
            # font-max-size
            | max-size
            # font-min-size
            | min-size
            # font-optical-sizing
            | optical-sizing
            # font-pallete
            | palette
            # font-presentation
            | presentation
            # font-size, font-size-adjust
            | size(?:-adjust)?
            # font-stretch
            | stretch
            # font-style
            | style
            # font-synthesis
            | synthesis
            # font-variant
            | variant
              (?:-
                # font-variant-alternates
                (?> alternates
                  # font-variant-caps
                  | caps
                  # font-variant-asian
                  | east-asian
                  # font-variant-ligatures
                  | ligatures
                  # font-variant-numeric
                  | numeric
                  # font-variant-position
                  | position
                )
              )?
            # font-variation-settings
            | variation-settings
            # font-weight
            | weight
          )
        )?
      # footnote-display, footnote-policy
      | footnote-(?>display|policy)
      | gap
      | glyph-orientation-vertical
      | hanging-punctuation
      | height
      | hyphenate-
        # hyphenate-character
        (?> character
          # hyphenate-limit-chars, hyphenate-limit-last, hyphenate-limit-lines,
          # hyphenate-limit-zone
          | limit-(?>chars|last|lines|zone)
        )
      | hyphens
      # image-orientation, image-resolution
      | image(?:-(?>orientation|resolution))
      # initial-letter, initial-align, initial-wrap
      | initial-letter(?:-(?>align|wrap))?
      | inline-size
      | inset
        (?:-
          # inset-block-end, inset-block-start
          (?> block(?:-(?>end|start))?
            # inset-inline-end, inset-inline-start
            | inline(?:-(?>end|start))?
          )
        )?
      | isolation
      # justify-content, justify-items, justify-self
      | justify-(?>content|items|self)
      | left
      | letter-spacing
      | lighting-color
      # line-break, line-grid, line-height, line-height-step, line-snap
      | line-(?>break|grid|height(?:-step)?|snap)
      | list-style
        (?:-
          # list-style-image
          (?> image
            # list-style-position
            | position
            # list-style-type
            | type
          )
        )?
      | margin
        (?:-
          # margin-block-end, margin-block-start
          (?> block(?:-(?>end|start))?
            # margin-bottom
            | bottom
            # margin-inline-end, margin-inline-start
            | inline(?:-(?>end|start))?
            # margin-left
            | left
            # margin-right
            | right
            # margin-top
            | top
          )
        )?
      | marker
        (?:-
          # marker-end
          (?> end
            # marker-knockout-left, marker-knockout-right
            | knockout-(?>left|right)
            # marker-mid
            | mid
            # marker-pattern
            | pattern
            # marker-segment
            | segment
            # marker-side
            | side
            # marker-start
            | start
          )
        )?
      # marquee-direction, marquee-loop, marquee-speed, marquee-style
      | marquee-(?>direction|loop|speed|style)
      | mask
        (?:-
          # mask-border
          (?> border
              (?:-
                # mask-border-mode
                (?> mode
                  # mask-border-outset
                  | outset
                  # mask-border-repeat
                  | repeat
                  # mask-border-slice
                  | slice
                  # mask-border-source
                  | source
                  # mask-border-width
                  | width
                )
              )?
            # mask-clip
            | clip
            # mask-composite
            | composite
            # mask-image
            | image
            # mask-mode
            | mode
            # mask-origin
            | origin
            # mask-position
            | position
            # mask-repeat
            | repeat
            # mask-size
            | size
            # mask-type
            | type
          )
        )?
      # max-block-size, max-height, max-inline-size, max-lines, max-width, max-zoom
      | max-(?>block-size|height|inline-size|lines|width|zoom)
      # min-block-size, min-height, min-inline-size, min-width, min-zoom
      | min-(?>block-size|height|inline-size|width|zoom)
      | mix-blend-mode
      # nav-down, nav-left, nav-right, nav-up
      | nav-(?>down|left|right|up)
      | negative
      # object-fit, object-position
      | object-(?>fit|position)
      | offset
        (?:-
          # offset-after
          (?> after
            # offset-anchor
            | anchor
            # offset-before
            | before
            # offset-distance
            | distance
            # offset-end
            | end
            # offset-path
            | path
            # offset-position
            | position
            # offset-rotate
            | rotate
            # offset-start
            | start
          )
        )?
      | opacity
      | order
      | orphans
      | orientation
      | overflow
        (?:-
          # overflow-style
          (?> style
            # overflow-wrap
            | wrap
            # overflow-x
            | x
            # overflow-y
            | y
          )
        )?
      | outline
        (?:-
          # outline-color
          (?> color
            # outline-offset
            | offset
            # outline-style
            | style
            # outline-width
            | width
          )
        )?
      | pad
        (?:ding
          (?:-
            # padding-block, padding-block-end, padding-block-start
            (?> block(?:-(?>end|start))?
              # padding-bottom
              | bottom
              # padding-inline, padding-inline-end, padding-inline-start
              | inline(?:-(?>end|start))?
              # padding-left
              | left
              # padding-right
              | right
              # padding-top
              | top
            )
          )?
        )?
      # page, page-break-after, page-break-before, page-break-inside
      | page(?:-break-(?>after|before|inside))?
      # pause, pause-after, pause-before
      | pause(?:-(?>after|before))?
      # pitch, pitch-range
      | pitch(?:-range)?
      # place-content, place-items, place-self
      | place-(?>content|items|self)
      | play-during
      | position
      | pointer-events
      | prefix
      | presentation-level
      | quotes
      | range
      | region-fragment
      | resize
      # rest, rest-after, rest-before
      | rest(?:-(?>after|before))?
      | richness
      | right
      # rotation, rotation-point
      | rotation(?:-point)?
      | row-gap
      # ruby-align, ruby-merge, ruby-position
      | ruby-(?>align|merge|position)
      | running
      | scroll-
        (?> behavior
          | margin
            (?:-
              # scroll-margin-block, scroll-margin-block-end,
              # scroll-margin-block-start
              (?> block(?:-(?>end|start))?
                # scroll-margin-bottom
                | bottom
                # scroll-margin-inline, scroll-margin-inline-end,
                # scroll-margin-inline-start
                | inline(?:-(?>end|start))?
                # scroll-margin-left
                | left
                # scroll-margin-right
                | right
                # scroll-margin-top
                | top
              )
            )?
        )
      | scroll-padding
        (?:-
          # scroll-padding-block, scroll-padding-block-end,
          # scroll-padding-block-start
          (?> block(?:-(?>end|start))?
            # scroll-padding-bottom
            | bottom
            # scroll-padding-inline, scroll-padding-inline-end,
            # scroll-padding-inline-start
            | inline(?:-(?>end|start))?
            # scroll-padding-left
            | left
            # scroll-padding-right
            | right
            # scroll-padding-top
            | top
          )
        )?
      # scroll-snap-align, scroll-snap-stop, scroll-snap-type
      | scroll-snap-(?>align|stop|type)
      | scrollbar-gutter
      # shape-inside, shape-image-threshold, shape-margin, shape-outside
      | shape-(?>inside|image-threshold|margin|outside)
      | size
      | speak
        (?:-
          # speak-as
          (?> as
            # speak-header
            | header
            # speak-numeral
            | numeral
            # speak-punctuation
            | punctuation
          )
        )?
      | speech-rate
      | src
      | stress
      | string-set
      | stroke
        (?:-
          # stroke-align, stroke-alignment
          (?> align(?:ment)?
            # stroke-break
            | break
            # stroke-color
            | color
            | dash
              # stroke-dash-corner, stroke-dash-justify
              (?> -(?>corner|justify)
                # stroke-dashadjust
                | adjust
                # stroke-array
                | array
                # stroke-corner
                | corner
                # stroke-offset
                | offset
              )
            # stroke-image
            | image
            # stroke-linecap, stroke-linejoin
            | line(?>cap|join)
            # stroke-miterlimit
            | miterlimit
            # stroke-opacity
            | opacity
            # stroke-origin
            | origin
            # stroke-position
            | position
            # stroke-repeat
            | repeat
            # stroke-size
            | size
            # stroke-width
            | width
          )
        )?
      # symbols, system, suffix
      | s(?>ymbols|ystem|uffix)
      | tab-size
      | table-layout
      | text-
        # text-align, text-align-all, text-align-last
        (?> align(?:-(?>all|last))?
          # text-combine-upright
          | combine-upright
          # text-decoration
          | decoration
            # text-decoration-color, text-decoration-line, text-decoration-skip
            # text-decoration-style
            (?:-(?>color|line|skip|style))?
          # text-emphasis
          | emphasis
            # text-emphasis-color, text-emphasis-position, text-emphasis-style
            (?:-(?>color|position|style))?
          # text-indent
          | indent
          # text-justify
          | justify
          # text-orientation
          | orientation
          # text-overflow
          | overflow
          # text-shadow
          | shadow
          # text-space-collapse, text-space-trim
          | space-(?>collapse|trim)
          # text-spacing
          | spacing
          # text-transform
          | transform
          # text-underline-position
          | underline-position
          # text-wrap
          | wrap
        )
      | top
      # transform, transform-box, transform-origin
      | transform(?:-(?>box|origin))?
      # transition, transition-delay, transition-duration, transition-property,
      # transition-timing-function
      | transition(?:-(?>delay|duration|property|timing-function))?
      | unicode-bidi
      | user-select
      | vertical-align
      | visibility
      | voice-
        # voice-balance
        (?> balance
          # voice-duration
          | duration
          # voice-family
          | family
          # voice-pitch
          | pitch
          # voice-range
          | range
          # voice-rate
          | rate
          # voice-stress
          | stress
          # voice-volume
          | volume
        )
      | volume
      | white-space
      | widows
      | width
      | will-change
      # word-break, word-spacing, word-wrap
      | word-(?>break|spacing|wrap)
      | wrap-
        # wrap-after
        (?> after
          # wrap-before
          | before
          # wrap-flow
          | flow
          # wrap-inside
          | inside
          # wrap-through
          | through
        )
      | writing-mode
      # z-index, zoom
      | z(?>-index|oom)
    )
  142_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  146_literalDecimal: '[0-9]+'
  146_literalFloat: |
    [+-]?
    (?> [0-9]*[.]{{146_literalDecimal}}
      | {{146_literalDecimal}}[.][0-9]+
    )
  146_scientificNotation: |
    (?> {{146_literalFloat}}
      | [+-]?{{146_literalDecimal}}
    )
    [e][+-]?
    {{146_literalDecimal}}
  146_angleUnits: (?>deg|grad|rad|turn)
  146_frequencyUnits: (?>k?Hz)
  146_relativeLengthUnits: |
    # cap, ch
    (?> c(?>ap|h)
      # em, ex
      | e[mx]
      | fr
      | ic
      | lh
      # rem, rlh
      | r(?>em|lh)
      # vb, vh, vi, vmax, vmin, vw
      | v(?>[bhiw]|m(?>ax|in))
      | x
    )
  146_absoluteLengthUnits: |
    (?> cm
      | in
      | mm
      # pc, pt, px
      | p[ctx]
      | q
    )
  146_resolutionUnits: dp(?>i|cm|px)
  146_timeUnits: (?>s|ms)
  146_unit: |
    (?> %
      | {{146_absoluteLengthUnits}}\b
      | {{146_relativeLengthUnits}}\b
      | {{146_angleUnits}}\b
      | {{146_resolutionUnits}}\b
      | {{146_timeUnits}}\b
      | {{146_frequencyUnits}}\b
    )
  148_hex: '[0-9a-f]'
  151_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  152_customSelector: (:--)([_[:alnum:]\-]*)
  153_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  153_corePseudoClasses: |
    (?> active
      # any, any-link
      | any(?:-link)?
      | checked
      | default
      | disabled
      | empty
      | enabled
      # first, first-child, first-of-type
      | first(?:-(?>child|of-type))?
      | fullscreen
      | focus
      | hover
      | indeterminate
      | in-range
      | invalid
      | last-(?>child|of-type)
      | left
      | link
      # only-child, only-of-type
      | only-(?>child|of-type)
      | optional
      | out-of-range
      # read-only, read-write
      | read-(?>only|write)
      | required
      | right
      | root
      | scope
      | target
      | valid
      | visited
    )
  157_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  163_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  163_tags: |
    (?> a
        # abbr
        (?> bbr
          # address
          | ddress
          # area
          | rea
          # article
          | rticle
          # aside
          | side
          # audio
          | udio
        )?
      | b
        # base
        (?> ase
          # bdi, bdo
          | d[io]
          # blockquote
          | lockquote
          # body
          | ody
          # br
          | r
          # button
          | utton
        )?
      # canvas, caption
      | ca(?>nvas|ption)
      | cite
      | code
      # col, colgroup
      | col(?:group)?
      # data, datalist
      | data(?:list)?
      | dd
      | del
      | details
      | dfn
      | dialog
      | div
      # dl, dt
      | d[lt]
      # em, embed
      | em(?:bed)?
      | fieldset
      | figcaption
      | figure
      | footer
      | form
      | h[1-6]
      # head, header
      | head(?:er)?
      | hgroup
      | hr
      | html
      | i
        # iframe
        (?> frame
          # img
          | mg
          # input
          | nput
          # ins
          | ns
        )?
      | kbd
      | label
      | legend
      # li, link
      | li(?:nk)?
      # main, map, mark
      | ma(?>in|p|rk)
      # meta, meter
      | met(?>a|er)
      | nav
      | nextid
      | noscript
      | object
      | ol
      # optgroup, option
      | opt(?>group|ion)
      | output
      | p
        # param
        (?> aram
          # picture
          | icture
          # pre
          | re
          # progress
          | rogress
        )?
      | q
      # rp, rt, rtc
      | r(?>p|tc?)
      | ruby
      | s
        # sup
        (?> amp
          # script
          | cript
          # section
          | ection
          # select
          | elect
          # slot
          | lot
          # small
          | mall
          # source
          | ource
          # span
          | pan
          # strong
          | trong
          # style
          | tyle
          # sub
          | ub
          # summary
          | ummary
          # sup
          | up
        )?
      | table
      | tbody
      | td
      | template
      | textarea
      | tfoot
      # th, thead
      | th(?:ead)?
      # time, title
      | ti(?>me|tle)
      # tr, track
      | tr(?:ack)?
      # u, ul
      | ul?
      | var
      | video
      | wbr
    )
  164_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  165_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  167_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  171_cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*
  177_customMedia: (--)([_[:alnum:]\-]*)
  183_documentFunctions: |
    (?> adoptNode
      | close
      | create
        # createAttribute
        (?> Attribute
          # createCDATASection
          | CDATASection
          # createComment
          | Comment
          # createDocumentFragment
          | DocumentFragment
          # ccreateElement, reateElementNS
          | Element(?:NS)?
          # createExpression
          | Event
          # createExpression
          | Expression
          # createNodeIterator
          | NodeIterator
          # createNSResolver
          | NSResolver
          # createProcessingInstruction
          | ProcessingInstruction
          # createRange
          | Range
          # createTextNode
          | TextNode
          # createTreeWalker
          | TreeWalker
        )
      | elementFromPoint
      | enableStyleSheetsForSet
      | evaluate
      | execCommand
      | exitFullscreen
      | getElement
        # getElementById
        (?> ById
          | sBy
            # getElementsByClassName
            (?> ClassName
              # getElementsByName
              | Name
              # getElementsByTagName, getElementsByTagNameNS
              | TagName(?:NS)?
            )
        )
      | getSelection
      | hasFocus
      | importNode
      | open
      | query
        # queryCommand, queryCommandEnabled, queryCommandSupported
        (?> Command(?>Enabled|Supported)
          # querySelector, querySelectorAll
          | Selector(?:All)?
        )
      | releaseCapture
      # write, writeln
      | write(?:ln)?
    )\b
  183_windowFunctions: |
    (?> addEventListener
      | alert
      | atob
      | blur
      | btoa
      # cancelAnimationFrame, cancelIddleCallback
      | cancel(?>AnimationFrame|IdleCallback)
      # clearInterval, clearTimeout
      | clear(?>Interval|Timeout)
      | close
      | confirm
      | convertPointFromNodeToPage
      | createImageBitmap
      | event
      | fetch
      | focus
      | forward
      | get
        # getAttention
        (?> Attention
          # getComputedStyle
          | ComputedStyle
          # getDefaultComputedStyle
          | DefaultComputedStyle
          # getSelection
          | Selection
        )
      | home
      | matchMedia
      | minimize
      # moveBy, moveTo
      | move(?>By|To)
      | open
      | postMessage
      | print
      | prompt
      # requestAnimationFrame, requestIdleCallback
      | request(?>AnimationFrame|IdleCallback)
      | removeEventListener
      # resizeBy, resizeTo
      | resize(?>By|To)
      | restore
      | routeEvent
      | scroll
        # scrollBy, scrollByPages
        (?> By(?:Pages)?
          # ScrollTo
          | To
        )?
      # setInterval, setTimeout
      | set(?>Interval|Timeout)
      | sizeToContent
      | stop
      | updateCommands
    )\b
contexts:
  1_array:
    - match: \[
      scope: punctuation.section.brackets.begin.js.jest-snapshot
      set:
        - 1_array-close
  1_array-close:
    - match: \]
      scope: punctuation.section.brackets.end.js.jest-snapshot
      pop: 'False'
    - include: 1_comma-no-pop
    - match: (?=\S)
      push:
        - 1_snapshot-content
  1_assignment:
    - match: \=
      scope: keyword.operator.other.assignment.js.jest-snapshot
  1_close-object:
    - meta_scope: meta.object-literal.js.jest-snapshot
    - match: \}
      scope: punctuation.section.block.end.js.jest-snapshot
      pop: 'False'
    - include: 1_comma-no-pop
    - match: (?=\S)
      push:
        - 1_key-value
        - 1_key-bind
        - 1_key
  1_close-snapshot:
    - match: \`
      scope: punctuation.definition.snapshot.end.js.jest-snapshot
      pop: 'True'
    - match: (?=\S)
      push:
        - 1_snapshot-content
  1_comma-no-pop:
    - match: \,
      scope: punctuation.separator.comma.js.jest-snapshot
  1_entry:
    - match: |
        (?xi)
        //\s+Jest\s+Snapshot.*
      scope: keyword.declaration.snapshot-version.js.jest-snapshot
    - match: exports\b
      scope: support.type.object.js.jest-snapshot
      push:
        - 1_value
        - 1_assignment
        - 1_property-access
    - match: ;
      scope: punctuation.terminator.js.jest-snapshot
  1_key:
    - meta_scope: meta.object-literal.key.jest-snapshot
  1_key-bind:
    - match: ':'
      scope: punctuation.separator.key-value.js.jest-snapshot
      pop: 'True'
  1_key-value:
    - include: 59_constants
    - include: 1_snapshot-content
  1_js-literals:
    - include: Naomi/integration/syntaxes/src/js/literal/index.yml
  1_jsx:
    - include: Naomi/integration/syntaxes/src/js/index.yml
  1_naomi:
    - meta_scope: naomi
    - match: ''
      pop: 'True'
  1_meta-jsx:
    - clear_scopes: true
    - meta_content_scope: source.jsx naomi
    - include: 1_pop-now
  1_object:
    - match: \{
      scope: punctuation.section.block.begin.js.jest-snapshot
      set:
        - 1_close-object
  1_pop-now:
    - match: ''
      pop: 'True'
  1_property-access:
    - include: Naomi/integration/syntaxes/src/js/property-access.yml
  1_snapshot-content:
    - match: (?xi)(?={{1_commonIdentifier}}\s*{)
      set:
        - 1_object
        - 1_type
    - match: (?xi)(?={{1_commonIdentifier}}\s*\[)
      set:
        - 1_type-array
    - match: (?xi)(?=<{{1_commonIdentifier}})
      set:
        - 1_meta-jsx
        - 1_jsx
    - include: 1_js-literals
  1_type:
    - match: |
        (?x)
        (?> Array
          | Object
          | Promise
        )
      scope: support.type.js.jest-snapshot
      pop: 'True'
    - match: (?xi){{1_commonIdentifier}}
      scope: variable.other.type.js.jest-snapshot
      pop: 'True'
  1_type-array:
    - match: ''
      set:
        - 1_array
        - 1_type
  1_value:
    - match: (`)
      captures:
        0: source.js.jest-snapshot
        1: keyword.operator.assignment.js.fjsx15
        2: punctuation.definition.snapshot.begin.js.fjsx15
      set:
        - 1_close-snapshot
    - include: 1_js-literals
  Naomi/integration/syntaxes/src/js/property-access.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 2_index
  2_index:
    - meta_scope: meta.brackets.js.fjsx15
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15a
      pop: 'True'
    - match: ''
      push:
        - 2_optional-expression
  2_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/optional-expression.yml:
    - include: 3_expression-escape
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  3_expression-escape:
    - match: (?=[,;:)\]}])
      pop: 'True'
  Naomi/integration/syntaxes/src/js/expression.yml:
    - include: 4_comment-no-pop
    - include: 4_shared-main
    - match: (?=\S)
      set:
        - 4_optional-tail
        - 4_head
  4_close-group:
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      pop: 'True'
  4_comma:
    - include: Naomi/integration/syntaxes/src/js/operator/comma.yml
  4_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  4_do-expression:
    - match: do\b
      scope: keyword.control.do-expression.js.fjsx15
      set:
        - 4_meta-do-expression
        - 4_do-expression-body-begin
  4_do-expression-body-begin:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 4_do-expression-body-end
  4_do-expression-body-end:
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 4_statement-or-expression
  4_function-call:
    - include: 4_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  4_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - match: ''
      pop: 'True'
  4_globals:
    - include: Naomi/integration/syntaxes/src/js/node-js.yml
    - include: Naomi/integration/syntaxes/src/js/react-js.yml
    - include: Naomi/integration/syntaxes/src/js/jest.yml
    - include: Naomi/integration/syntaxes/src/js/web.yml
    - include: Naomi/integration/syntaxes/src/js/core.yml
  4_head:
    - include: 4_comment-no-pop
    - include: 4_do-expression
    - include: 4_globals
    - include: Naomi/integration/syntaxes/src/js/jsx1.yml
    - include: Naomi/integration/syntaxes/src/js/literal/index.yml
    - include: Naomi/integration/syntaxes/src/js/class/index.yml
    - include: Naomi/integration/syntaxes/src/js/function-expression.yml
    - include: Naomi/integration/syntaxes/src/js/function-call/index.yml
    - include: 42_function-assigned-to-variable
    - include: Naomi/integration/syntaxes/src/js/constant.yml
    - include: Naomi/integration/syntaxes/src/js/variable.yml
    - match: \(
      scope: punctuation.section.group.begin.js.fjsx15
      set:
        - 4_open-group
  4_meta-do-expression:
    - meta_scope: meta.do-expression.js.fjsx15
    - match: ''
      pop: 'True'
  4_open-group:
    - meta_scope: meta.group.js.fjsx15
    - include: 4_comment-no-pop
    - include: 4_close-group
    - match: (?=:)
      set:
        - 4_close-group
        - 4_type-cast
    - match: (?=\S)
      push:
        -   - include: 4_shared-main
            - match: ''
              set:
                - 4_optional-tail
                - 4_head
  4_optional-tail:
    - include: 4_comment-no-pop
    - match: (?=\()
      push:
        - 4_function-call-meta-scope
        - 4_function-call
    - match: (?=\[)
      push:
        - 4_property-access
    - include: Naomi/integration/syntaxes/src/js/operator/index.yml
    - match: (?=\S)
      pop: 'True'
  4_property-access:
    - include: 4_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/property-access.yml
  4_regex-literal:
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/index.yml
  4_shared-main:
    - include: 4_comma
    - match: (?=/)
      set:
        - 4_optional-tail
        - 4_regex-literal
    - include: Naomi/integration/syntaxes/src/js/arrow-function/index.yml
    - include: Naomi/integration/syntaxes/src/js/jsx1-early.yml
    - match: (?=\.\d)
      set:
        -   - include: Naomi/integration/syntaxes/src/js/literal/number.yml
    - include: Naomi/integration/syntaxes/src/js/operator/index.yml
  4_statement-or-expression:
    - include: 4_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/statement.yml
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  4_type-cast:
    - include: Naomi/integration/syntaxes/src/facebook-flow/cast.yml
  Naomi/integration/syntaxes/src/facebook-flow/cast.yml:
    - match: ':'
      scope: keyword.operator.other.cast.flow
      set:
        - 5_optional-type-expression
  5_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml:
    - match: (?=[>,;:)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/type-expression.yml:
    - include: 7_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/function/index.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/index.yml
    - match: \(
      scope: punctuation.section.group.begin.flow
      set:
        - 7_open-group
    - match: (?=\S)
      set:
        - 7_optional-tail
        - 7_head
  7_close-group:
    - match: \)
      scope: punctuation.section.group.end.flow
      set:
        - 7_optional-tail
  7_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  7_else-pop:
    - match: (?=\S)
      pop: 'True'
  7_head:
    - include: 7_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/object.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/tuple.yml
    - include: Naomi/integration/syntaxes/src/js/literal/number.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/simple.yml
  7_open-group:
    - include: 7_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/function.no-pop.yml
    - match: \(
      scope: punctuation.section.group.begin.flow
      push:
        - 7_open-group
    - include: 7_close-group
    - match: (?=\S)
      push:
        - 7_optional-type-expression
  7_optional-tail:
    - include: 7_comment-no-pop
    - match: (?=[\[<])
      set:
        - 7_optional-tail
        - 7_tail
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/index.yml
    - include: 7_else-pop
  7_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  7_tail:
    - include: 7_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/array-shorthand.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml:
    - match: \<
      scope: punctuation.section.generic.begin.flow
      set:
        - 8_delimiters
        - 8_optional-type-expression
  8_delimiters:
    - meta_scope: meta.generic.flow
    - match: \,
      scope: punctuation.separator.comma.flow
      push:
        - 8_optional-type-expression
    - match: \>
      scope: punctuation.section.generic.end.flow
      pop: 'True'
  8_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/operator/array-shorthand.yml:
    - match: ((\[)\s*(]))
      captures:
        1: meta.sequence.flow
        2: punctuation.section.brackets.begin.flow
        3: punctuation.section.brackets.end.flow
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/operator/index.yml:
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/typeof.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/intersection.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/nullable.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/union.yml
  Naomi/integration/syntaxes/src/facebook-flow/operator/union.yml:
    - match: \|(?!})
      scope: keyword.operator.other.union.flow
      set:
        - 11_optional-type-expression
  11_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/operator/nullable.yml:
    - match: \?
      scope: storage.modifier.nullable.flow
      set:
        - 12_optional-type-expression
  12_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/operator/intersection.yml:
    - match: \&
      scope: keyword.operator.other.intersection.flow
      set:
        - 13_optional-type-expression
  13_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/operator/typeof.yml:
    - match: (?i)typeof\b
      scope: keyword.operator.word.typeof.flow
      set:
        - 14_type
  14_type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/function.no-pop.yml:
    - match: |
        (?xi)
        (?=
          {{15_genericArguments}}?
          {{15_flowFunction}}
        )
      push:
        - 15_declaration
    - match: |
        (?xi)
        (?=
          {{15_complexType}}
          \s*=>
          (?!\s*{)
        )
      push:
        - 15_return
        - 15_meta-parameters
        - 15_optional-tail
        - 15_head
  15_declaration:
    - include: 16_declaration
  15_head:
    - include: 16_head
  15_meta-parameters:
    - include: 16_meta-parameters
  15_optional-tail:
    - include: 16_optional-tail
  15_return:
    - include: 16_return
  Naomi/integration/syntaxes/src/facebook-flow/function/index.yml:
    - match: |
        (?xi)
        (?=
          {{16_genericArguments}}?
          {{16_flowFunction}}
        )
      set:
        - 16_declaration
    - match: |
        (?xi)
        (?=
          {{16_commonIdentifier}}
          {{16_genericArguments}}
          \s*=>
          (?!\s*\{)
        )
      set:
        - 16_return
        - 16_meta-parameters
        - 16_optional-tail
        - 16_head
  16_declaration:
    - match: (?=<)
      push:
        - 16_generic-arguments
    - match: (?=\()
      set:
        - 16_return
        - 16_parameters
  16_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  16_head:
    - include: 7_head
  16_meta-parameters:
    - meta_scope: meta.function.parameters.flow
    - include: 16_pop-now
  16_optional-tail:
    - include: 7_optional-tail
  16_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  16_parameters:
    - include: Naomi/integration/syntaxes/src/facebook-flow/function/parameters/index.yml
  16_pop-now:
    - match: ''
      pop: 'True'
  16_return:
    - match: =>
      scope: storage.type.function.arrow.flow
      set:
        - 16_optional-type-expression
  Naomi/integration/syntaxes/src/facebook-flow/function/parameters/index.yml:
    - match: \(
      scope: punctuation.section.group.begin.flow
      set:
        - 17_delimiters
        - 17_optional-parameter
  17_delimiters:
    - match: \,
      scope: punctuation.separator.comma.flow
      push:
        - 17_optional-parameter
    - match: \)
      scope: punctuation.section.group.end.flow
      pop: 'True'
  17_optional-parameter:
    - meta_scope: meta.function.parameters.flow
    - match: \.{3}
      scope: keyword.operator.other.rest.flow
    - include: Naomi/integration/syntaxes/src/facebook-flow/function/parameters/simple.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/function/parameters/simple.yml:
    - match: |
        (?xi)
        ({{18_commonIdentifier}})(\?)?
        (?=\s*:)
      captures:
        1: variable.parameter.function.js.fjsx15
        2: storage.modifier.flow
      set:
        - 18_optional-associated-type
  18_optional-associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml:
    - match: (?=:)
      set:
        - 19_associated-type
    - match: (?=\S)
      pop: 'True'
  19_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml:
    - match: ':'
      scope: punctuation.binding.flow
      set:
        - 20_optional-type-expression
  20_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/simple.yml:
    - include: Naomi/integration/syntaxes/src/facebook-flow/namespace-path.no-pop.yml
    - match: \*
      scope: support.type.existential.flow
      pop: 'True'
    - match: |
        (?x)
        (?> any
          | Array
          | [Bb]oolean
          | false
          | Function
          | Generator
          | mixed
          | [Nn]umber
          | null
          | Object
          | [Ss]tring
          | true
          | undefined
          | void
        )\b
      scope: support.type.primitive.flow
      pop: 'True'
    - match: (?xi){{21_commonIdentifier}}
      scope: variable.other.type.flow
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/namespace-path.no-pop.yml:
    - match: |
        (?xi)
        ({{22_commonIdentifier}})\s*
        (?> (\?\.)
          | (\.)
        )
      captures:
        1: variable.other.namespace.flow
        2: punctuation.accessor.optional-chain.flow
        3: punctuation.accessor.flow
  Naomi/integration/syntaxes/src/js/literal/string/template.yml:
    - match: (?xi){{23_commonIdentifier}}(?=\s*\`)
      scope: entity.name.function.tag.js.fjsx15
      set:
        - Naomi/integration/syntaxes/src/js/literal/string/template.yml
    - match: \`
      scope: punctuation.definition.string.begin.js.fjsx15
      set:
        -   - meta_scope: string.template.js.fjsx15
            - match: \`
              scope: punctuation.definition.string.end.js.fjsx15
              pop: 'True'
            - match: (?xi){{23_escapeSequences}}
              scope: constant.character.escape.js.fjsx15
  23_close-embedded-expression:
    - clear_scopes: true
    - meta_scope: source.js meta.template-expression.js.fjsx15
    - match: \}
      scope: punctuation.definition.template-expression.end.js.fjsx15
      pop: 'True'
  23_embedded-content:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  23_embedded-expression-no-pop:
    - match: \$\{
      scope: punctuation.definition.template-expression.begin.js.fjsx15
      push:
        - 23_close-embedded-expression
        - 23_embedded-content
  Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml:
    - match: \'
      scope: punctuation.definition.string.begin.js.fjsx15
      set:
        - 24_string
  24_trap:
    - meta_content_scope: context.trap
  24_string:
    - meta_scope: string.quoted.single.js.fjsx15
    - match: (?<!\\)\n
      set:
        - 24_trap
    - match: \'
      scope: punctuation.definition.string.end.js.fjsx15
      pop: 'True'
    - match: (?xi){{24_singleQuotedEscapeSequences}}
      scope: constant.character.escape.js.fjsx15
  Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml:
    - match: \"
      scope: punctuation.definition.string.begin.js.fjsx15
      set:
        - 25_string
  25_trap:
    - meta_content_scope: context.trap
  25_string:
    - meta_scope: string.quoted.double.js.fjsx15
    - match: (?<!\\)\n
      set:
        - 25_trap
    - match: \"
      scope: punctuation.definition.string.end.js.fjsx15
      pop: 'True'
    - match: (?xi){{25_doubleQuotedEscapeSequences}}
      scope: constant.character.escape.js.fjsx15
  Naomi/integration/syntaxes/src/js/literal/number.yml:
    - include: 26_float
    - include: 26_integer
  26_float:
    - match: (?xi){{26_scientificNotation}}
      scope: constant.numeric.float.scientific.js.fjsx15
      pop: 'True'
    - match: (?x){{26_literalFloat}}
      scope: constant.numeric.float.js.fjsx15
      pop: 'True'
  26_integer:
    - match: (?i)(0b)([01_]+)
      captures:
        1: constant.numeric.binary.js.fjsx15 punctuation.definition.numeric.js.fjsx15
        2: constant.numeric.binary.js.fjsx15
      pop: 'True'
    - match: (?i)(0o)([0-7]+)
      captures:
        1: constant.numeric.octal.js.fjsx15 punctuation.definition.numeric.js.fjsx15
        2: constant.numeric.octal.js.fjsx15
      pop: 'True'
    - match: (?i)(0x)([0-9a-f_]+)
      captures:
        1: constant.numeric.hex.js.fjsx15 punctuation.definition.numeric.js.fjsx15
        2: constant.numeric.hex.js.fjsx15
      pop: 'True'
    - match: ([1-9][0-9_]*|0)(?:\s*(n))?
      captures:
        1: constant.numeric.decimal.js.fjsx15
        2: storage.type.numeric.bigint.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/tuple.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.flow
      set:
        - 27_delimiters
        - 27_optional-type-expression
  27_delimiters:
    - meta_scope: meta.sequence.flow
    - match: \,
      scope: punctuation.separator.comma.flow
      push:
        - 27_optional-type-expression
    - match: \]
      scope: punctuation.section.brackets.end.flow
      pop: 'True'
  27_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/object.yml:
    - match: ({)\s*(\|)
      captures:
        1: punctuation.section.block.begin.flow
        2: punctuation.section.block.begin.flow
      set:
        - 28_meta-exact
        - 28_delimiters
        - 28_optional-property-or-method
    - match: \{
      scope: punctuation.section.block.begin.flow
      set:
        - 28_meta-scope
        - 28_delimiters
        - 28_optional-property-or-method
  28_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  28_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  28_co-contra-variant-no-pop:
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/covariant.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/contravariant.no-pop.yml
  28_constant:
    - match: |
        (?x)
        ([_[:upper:]])\b
        (?:\s*(\?\B))?
      captures:
        1: meta.object-literal.key.flow string.unquoted.flow
        2: storage.modifier.optional.flow
      set:
        - 28_associated-type
    - match: |
        (?x)
        (
          {{28_constantIdentifier}}
          (?> \$\B
            | [_[:upper:]]\b
          )
        )
        (?:\s*(\?\B))?
      captures:
        1: meta.object-literal.key.flow string.unquoted.flow
        2: storage.modifier.optional.flow
      set:
        - 28_associated-type
  28_delimiters:
    - match: (?:(,)|(;))
      captures:
        1: punctuation.separator.comma.flow
        2: punctuation.terminator.flow
      push:
        - 28_optional-property-or-method
    - match: (\|)\s*(})
      captures:
        1: punctuation.section.block.end.flow
        2: punctuation.section.block.end.flow
      pop: 'True'
    - match: \}
      scope: punctuation.section.block.end.flow
      pop: 'True'
  28_else-pop:
    - match: (?=\S)
      pop: 'True'
  28_meta-scope:
    - meta_scope: meta.object-literal.flow meta.block.flow
    - include: 28_pop-now
  28_meta-exact:
    - meta_scope: meta.object-literal.exact.flow meta.block.flow
    - include: 28_pop-now
  28_optional-property-or-method:
    - include: 28_comment-no-pop
    - match: (?=[|}])
      pop: 'True'
    - include: 28_co-contra-variant-no-pop
    - match: \.{3}
      scope: keyword.operator.spread.flow
      set:
        - 28_type-expression
    - include: Naomi/integration/syntaxes/src/js/class/modifier.yml
    - include: Naomi/integration/syntaxes/src/js/class/method.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/indexer.yml
    - include: 28_constant
    - include: 28_variable
    - match: (?=(?>'|"|`))
      set:
        - 28_associated-type
        - 28_string
    - include: 28_else-pop
  28_pop-now:
    - match: ''
      pop: 'True'
  28_string:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  28_type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-expression.yml
  28_variable:
    - match: |
        (?xi)
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
        (?:\s*(\?))?
      captures:
        1: meta.object-literal.key.flow string.unquoted.flow
        2: storage.modifier.optional.flow
      set:
        - 28_associated-type
    - match: |
        (?xi)
        (
          {{28_commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
        (?:\s*(\?))?
      captures:
        1: meta.object-literal.key.flow string.unquoted.flow
        2: storage.modifier.optional.flow
      set:
        - 28_associated-type
  Naomi/integration/syntaxes/src/facebook-flow/indexer.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.flow
      set:
        - 29_optional-associated-type
        - 29_indexer-end
        - 29_optional-name
  29_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  29_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  29_indexer-end:
    - match: \]
      scope: punctuation.section.brackets.end.flow
      pop: 'True'
  29_optional-associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  29_optional-name:
    - include: 29_comment-no-pop
    - match: |
        (?xi)
        ({{29_commonIdentifier}})(\?)?
        (?=\s*:)
      captures:
        1: variable.parameter.function.js.fjsx15
        2: storage.modifier.optional.flow
      set:
        - 29_associated-type
    - match: (?=(?>'|"|`))
      set:
        - 29_associated-type
        - 29_string
    - match: (?=\S)
      set:
        - 29_type-expression
  29_string:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  29_type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-expression.yml
  Naomi/integration/syntaxes/src/js/comment.no-pop.yml:
    - match: (?=/(?>/|\*))
      push:
        -   - include: Naomi/integration/syntaxes/src/js/comment/index.yml
  Naomi/integration/syntaxes/src/js/comment/index.yml:
    - include: Naomi/integration/syntaxes/src/facebook-flow/prolog.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/comment.yml
    - include: Naomi/integration/syntaxes/src/js/comment/docblock.yml
    - include: Naomi/integration/syntaxes/src/js/comment/block.yml
    - include: Naomi/integration/syntaxes/src/js/comment/line.yml
  Naomi/integration/syntaxes/src/js/comment/line.yml:
    - match: //
      scope: punctuation.definition.comment.begin.js.fjsx15
      set:
        - 32_line
  32_no-pop:
    - match: //
      scope: punctuation.definition.comment.begin.js.fjsx15
      push:
        - 32_line
  32_line:
    - meta_scope: comment.line.js.fjsx15
    - include: 32_email-no-pop
    - include: 32_link-no-pop
    - match: \n|$
      pop: 'True'
  32_email-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/email.no-pop.yml
  32_link-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/link.no-pop.yml
  Naomi/integration/syntaxes/src/shared/link.no-pop.yml:
    - match: (?i)([[:alnum:]]+://\S+)\s
      captures:
        1: entity.link
  Naomi/integration/syntaxes/src/shared/email.no-pop.yml:
    - match: |
        (?xi)
        (?> ([.[:alnum:]]+@[.[:alnum:]]+)\s
          | (<[.[:alnum:]]+@[.[:alnum:]]+>)
        )
      captures:
        1: entity.email
        2: entity.email
  Naomi/integration/syntaxes/src/js/comment/block.yml:
    - match: /\*
      scope: punctuation.definition.comment.begin.js.fjsx15
      set:
        - 35_block
  35_block:
    - meta_scope: comment.block.js.fjsx15
    - include: 35_email-no-pop
    - include: 35_link-no-pop
    - match: \*/
      scope: punctuation.definition.comment.end.js.fjsx15
      pop: 'True'
  35_email-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/email.no-pop.yml
  35_link-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/link.no-pop.yml
  Naomi/integration/syntaxes/src/js/comment/docblock.yml:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.begin.js.fjsx15
      set:
        - 36_block
  36_block:
    - meta_scope: comment.block.documentation.js.fjsx15
    - include: 36_email-no-pop
    - include: 36_link-no-pop
    - match: \*/
      scope: punctuation.definition.comment.end.js.fjsx15
      pop: 'True'
  36_email-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/email.no-pop.yml
  36_link-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/link.no-pop.yml
  Naomi/integration/syntaxes/src/facebook-flow/comment.yml:
    - match: /\*\s*(?>::|flow-include)
      scope: punctuation.definition.comment.begin.flow
      set:
        - 37_block-end
    - match: /\*(?=\s*:)
      scope: punctuation.definition.comment.begin.flow
      set:
        - 37_block-end
  37_block-end:
    - meta_scope: comment.block.flow
    - match: \*/
      scope: punctuation.definition.comment.end.js.fjsx15
      pop: 'True'
    - match: (;)
      captures:
        1: punctuation.terminator.flow
    - match: (?=\S)
  37_statement-without-label:
    - include: Naomi/integration/syntaxes/src/facebook-flow/declare.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/interface.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-aliasing.yml
    - include: Naomi/integration/syntaxes/src/js/decorator.yml
    - include: Naomi/integration/syntaxes/src/js/import.yml
    - include: Naomi/integration/syntaxes/src/js/export.yml
    - include: Naomi/integration/syntaxes/src/js/class/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/index.yml
    - include: Naomi/integration/syntaxes/src/js/variable-declaration.yml
    - include: 38_block
    - include: 38_break-continue
    - include: 38_debugger
    - include: 38_do-while
    - include: 38_empty
    - include: 38_for
    - include: 38_if-else
    - include: 38_return
    - include: 38_switch-case
    - include: 38_throw
    - include: 38_try-catch-finally
  Naomi/integration/syntaxes/src/js/statement.yml:
    - include: Naomi/integration/syntaxes/src/facebook-flow/declare.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/interface.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-aliasing.yml
    - include: Naomi/integration/syntaxes/src/js/decorator.yml
    - include: Naomi/integration/syntaxes/src/js/import.yml
    - include: Naomi/integration/syntaxes/src/js/export.yml
    - include: Naomi/integration/syntaxes/src/js/class/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/index.yml
    - include: Naomi/integration/syntaxes/src/js/variable-declaration.yml
    - include: 38_block
    - include: 38_break-continue
    - include: 38_debugger
    - include: 38_do-while
    - include: 38_empty
    - include: 38_for
    - include: 38_if-else
    - include: 38_label
    - include: 38_return
    - include: 38_switch-case
    - include: 38_throw
    - include: 38_try-catch-finally
  38_asi-checked-optional-expression:
    - match: (?=\s*\n)
      pop: 'True'
    - include: 38_optional-expression
  38_block:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 38_block-end
  38_block-end:
    - meta_scope: meta.block.js.fjsx15
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - match: ''
      push:
        - 38_optional-statement-or-expression
  38_break-continue:
    - match: |
        (?xi)
        (?>(break)|(continue))\b
        (?:\s+({{38_commonIdentifier}}))?
      captures:
        1: keyword.control.flow.break.js.fjsx15
        2: keyword.control.flow.break.continue.js.fjsx15
        3: entity.name.label.js.fjsx15
      pop: 'True'
  38_colon:
    - match: ':'
      scope: punctuation.separator.js.fjsx15
      pop: 'True'
  38_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  38_debugger:
    - match: debugger\b
      scope: keyword.other.js.fjsx15
      pop: 'True'
  38_do-while:
    - match: do\b
      scope: keyword.control.loop.js.fjsx15
      set:
        - 38_meta-loop-do
        - 38_optional-while
        - 38_optional-statement-or-expression
    - match: while\b
      scope: keyword.control.loop.js.fjsx15
      set:
        - 38_meta-loop-while
        - 38_optional-statement-or-expression
        - 38_optional-expression
  38_else-pop:
    - match: (?=\S)
      pop: 'True'
  38_empty:
    - match: \;
      scope: punctuation.terminator.js.fjsx15
      pop: 'True'
  38_expression:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  38_for:
    - match: for\b
      scope: keyword.control.loop.js.fjsx15
      set:
        - 38_meta-loop-for
        - 38_optional-statement-or-expression
        - 38_for-header
        - 38_optional-await
  38_for-header:
    - match: \(
      scope: punctuation.section.group.begin.js.fjsx15
      set:
        - 38_meta-group
        - 38_for-header-end
  38_for-header-end:
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      pop: 'True'
    - match: (?=(?>const|let|var))
      push:
        - 38_statement-or-expression
    - match: (?=\S)
      push:
        -   - include: 38_empty
            - include: 38_expression
  38_if-else:
    - match: if\b
      scope: keyword.control.conditional.js.fjsx15
      set:
        - 38_meta-conditional
        - 38_optional-statement-or-expression
        - 38_optional-expression
    - match: else\b
      scope: keyword.control.conditional.js.fjsx15
      set:
        - 38_meta-conditional
        - 38_optional-else-if
  38_label:
    - match: |
        (?xi)
        (?!default)
        ({{38_commonIdentifier}})
        \s*(:)
      captures:
        1: entity.name.label.js.fjsx15
        2: punctuation.separator.js.fjsx15
      set:
        - 38_optional-statement-or-expression
  38_meta-group:
    - meta_scope: meta.group.js.fjsx15
    - include: 38_pop-now
  38_meta-conditional:
    - meta_scope: meta.conditional.js.fjsx15
    - include: 38_pop-now
  38_meta-loop-do:
    - meta_scope: meta.loop.do.js.fjsx15
    - include: 38_pop-now
  38_meta-loop-for:
    - meta_scope: meta.loop.for.js.fjsx15
    - include: 38_pop-now
  38_meta-loop-while:
    - meta_scope: meta.loop.while.js.fjsx15
    - include: 38_pop-now
  38_meta-switch:
    - meta_scope: meta.switch.js.fjsx15
    - include: 38_pop-now
  38_no-meta-if:
    - match: if\b
      scope: keyword.control.conditional.js.fjsx15
      set:
        - 38_optional-statement-or-expression
        - 38_optional-expression
  38_optional-await:
    - include: 40_just-pop
    - include: 38_else-pop
  38_optional-else-if:
    - include: 38_no-meta-if
    - include: 38_optional-statement-or-expression
  38_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  38_optional-statement-or-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-statement-or-expression.yml
  38_optional-while:
    - include: 38_comment-no-pop
    - match: while\b
      scope: keyword.control.loop.js.fjsx15
      set:
        - 38_optional-expression
  38_pop-now:
    - match: ''
      pop: 'True'
  38_return:
    - match: return\b
      scope: keyword.control.flow.return.js.fjsx15
      set:
        - 38_asi-checked-optional-expression
  38_statement-or-expression:
    - include: Naomi/integration/syntaxes/src/js/comment/index.yml
    - include: Naomi/integration/syntaxes/src/js/statement.yml
    - include: Naomi/integration/syntaxes/src/js/expression.yml
    - include: 38_else-pop
  38_statement-or-expression-header-end:
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 38_statement-or-expression
  38_switch-case:
    - match: switch\b
      scope: keyword.control.switch.js.fjsx15
      set:
        - 38_meta-switch
        - 38_optional-expression
    - match: case\b
      scope: keyword.control.switch.js.fjsx15
      set:
        - 38_colon
        - 38_optional-expression
    - match: default\b
      scope: keyword.control.switch.js.fjsx15
      set:
        - 38_colon
        - 38_optional-expression
  38_throw:
    - match: throw\b
      scope: keyword.control.flow.break.throw.js.fjsx15
      set:
        - 38_asi-checked-optional-expression
  38_try-catch-finally:
    - match: try\b
      scope: keyword.control.trycatch.js.fjsx15
      pop: 'True'
    - match: catch\b
      scope: keyword.control.trycatch.js.fjsx15
      set:
        - 38_optional-expression
    - match: finally\b
      scope: keyword.control.trycatch.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/optional-statement-or-expression.yml:
    - match: (?=[)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/statement.yml
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  Naomi/integration/syntaxes/src/js/operator/await.yml:
    - match: await\b
      scope: keyword.control.flow.await.js.fjsx15
      set:
        - 40_optional-expression
  40_just-pop:
    - match: \s*(await)\b
      captures:
        1: keyword.control.flow.await.js.fjsx15
      pop: 'True'
  40_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/variable-declaration.yml:
    - match: (?=(?>const|let|var)\b)
      set:
        - 41_optional-type-and-initial-value
        - 41_variable-or-constant
        - 41_keyword
  41_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  41_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  41_else-pop:
    - match: (?=\S)
      pop: 'True'
  41_keyword:
    - match: (?>const|let|var)\b
      scope: storage.type.js.fjsx15
      pop: 'True'
  41_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  41_optional-type-and-initial-value:
    - meta_scope: meta.declaration.variable.js.fjsx15
    - match: (?=:)
      push:
        - 41_associated-type
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 41_variable-or-constant
    - match: (?==)
      push:
        - 41_optional-expression
    - include: 41_else-pop
  41_constant:
    - match: |
        (?x)
        (\#)?
        ([_[:upper:]])\b
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.constant.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (\#)?
        (
          {{41_constantIdentifier}}
          (?> \$\B
            | [_[:upper:][:digit:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.constant.js.fjsx15
      pop: 'True'
  41_variable:
    - match: |
        (?xi)
        (\#)?
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: 'True'
    - match: |
        (?xi)
        (\#)?
        (
          {{41_commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: 'True'
  41_variable-or-constant:
    - include: 41_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/object/index.yml
    - include: 42_function-assigned-to-variable
    - include: 41_constant
    - include: 41_variable
  Naomi/integration/syntaxes/src/js/variable.yml:
    - include: 42_object
    - include: 42_simple
  42_arrow-body:
    - include: Naomi/integration/syntaxes/src/js/arrow-function/body.yml
  42_assignment:
    - match: '='
      scope: keyword.operator.assignment.js.fjsx15
      pop: 'True'
  42_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  42_function-assigned-to-variable:
    - match: |
        (?x)
        (?={{42_normalArrowFunctionAssignedToVariable}})
      set:
        - 42_normal-arrow-function
        - 42_assignment
        - 42_optional-type
        - 42_function-identifier
    - match: |
        (?x)
        (?={{42_singleParameterArrowFunctionAssignedToVariable}})
      set:
        - 42_single-parameter-arrow-function
        - 42_assignment
        - 42_optional-type
        - 42_function-identifier
    - match: |
        (?x)
        (?=
          {{42_commonIdentifier}}
          (?:\s*{{42_type}})?
          \s*=\s*
          (?:async\b\s+)?
          function\s
        )
      set:
        - 42_function
        - 42_assignment
        - 42_optional-type
        - 42_function-identifier
  42_function:
    - meta_scope: meta.declaration.function.js.fjsx15 meta.function.js.fjsx15
    - include: Naomi/integration/syntaxes/src/js/function/index.yml
  42_function-identifier:
    - match: (?xi){{42_commonIdentifier}}
      scope: entity.name.function.js.fjsx15
      pop: 'True'
  42_normal-arrow-function:
    - meta_scope: meta.declaration.function.arrow.js.fjsx15
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameters.no-pop.yml
    - match: (?==>)
      set:
        - 42_arrow-body
  42_single-parameter-arrow-function:
    - meta_scope: meta.declaration.function.arrow.js.fjsx15
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.no-pop.yml
    - match: (?==>)
      set:
        - 42_arrow-body
  42_optional-type:
    - include: 42_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  42_object:
    - match: |
        (?xi)
        (\#)?
        ({{42_commonIdentifier}})
        (?=\s*\??\.)
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.object.js.fjsx15
      pop: 'True'
  42_simple:
    - match: |
        (?xi)
        (\#)?
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: 'True'
    - match: |
        (?xi)
        (\#)?
        (
          {{42_commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/function/parameter/simple.no-pop.yml:
    - match: |
        (?xi)
        (?=
          (?:\.{3})?
          {{43_commonIdentifier}}
        )
      push:
        - 43_parameter
  43_parameter:
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.yml
  Naomi/integration/syntaxes/src/js/function/parameter/simple.yml:
    - match: |
        (?xi)
        {{44_commonIdentifier}}
        (?=
          \s*\??
          \s*{{44_type}}?
          (?:\s*/\*.*?\*/)?
          \s*=(?!\s*>)
        )
      scope: variable.parameter.function.js.fjsx15
      set:
        - 44_optional-default-value
        - 44_optional-modifier-and-type
    - match: (?xi){{44_commonIdentifier}}
      scope: variable.parameter.function.js.fjsx15
      set:
        - 44_optional-modifier-and-type
  44_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  44_expression:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  44_optional-default-value:
    - meta_scope: meta.function.parameter.optional.js.fjsx15
    - include: 44_comment-no-pop
    - match: (?=(?>[,;:)\]}]|=>))
      pop: 'True'
    - match: (?==)
      push:
        - 44_expression
  44_optional-modifier-and-type:
    - include: 44_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-modifier.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  Naomi/integration/syntaxes/src/facebook-flow/optional-modifier.no-pop.yml:
    - match: (?=\?)
      push:
        - 45_optional-modifier
  45_optional-modifier:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-modifier.yml
  Naomi/integration/syntaxes/src/facebook-flow/optional-modifier.yml:
    - match: \?
      scope: storage.modifier.optional.flow
      pop: 'True'
  Naomi/integration/syntaxes/src/js/async.no-pop.yml:
    - match: async\b
      scope: storage.modifier.async.js.fjsx15
  Naomi/integration/syntaxes/src/js/function/parameters.no-pop.yml:
    - match: (?=\()
      push:
        - 48_parameters
  48_parameters:
    - include: Naomi/integration/syntaxes/src/js/function/parameters.yml
  Naomi/integration/syntaxes/src/js/function/parameters.yml:
    - match: \(
      scope: punctuation.section.group.begin.js.fjsx15
      set:
        - 49_delimiters
  49_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  49_delimiters:
    - meta_scope: meta.function.parameters.js.fjsx15 meta.group.js.fjsx15
    - include: 49_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      set:
        - 49_optional-return-type
    - include: Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml
    - match: (?=\S)
      push:
        - 49_parameter
  49_optional-return-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  49_parameter:
    - include: 49_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.yml
  Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/index.yml:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 50_meta
        - 50_delimiters
        - 50_optional-parameter
  50_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  50_delimiters:
    - include: 50_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 50_optional-parameter
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      set:
        - 50_optional-type-and-default-value
  50_meta:
    - meta_scope: meta.binding.destructuring.mapping.js.fjsx15 meta.block.js.fjsx15
    - match: ''
      pop: 'True'
  50_optional-parameter:
    - include: 50_comment-no-pop
    - match: (?=[,)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/property.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.yml
  50_optional-type-and-default-value:
    - match: (?=,)
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/facebook-flow/associated-type.no-pop.yml:
    - match: (?=:)
      push:
        - 51_associated-type
  51_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  Naomi/integration/syntaxes/src/js/function/parameter/destructuring/array.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 52_meta
        - 52_delimiters
        - 52_optional-parameter
  52_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  52_delimiters:
    - include: 52_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 52_optional-parameter
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15
      set:
        - 52_optional-type-and-default-value
  52_meta:
    - meta_scope: meta.binding.destructuring.sequence.js.fjsx15 meta.block.js.fjsx15
    - match: ''
      pop: 'True'
  52_optional-parameter:
    - include: 52_comment-no-pop
    - match: (?=[,)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.yml
  52_optional-type-and-default-value:
    - match: (?=,)
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml:
    - match: (?=\.{3})
      push:
        - 53_rest-operator
  53_rest-operator:
    - include: Naomi/integration/syntaxes/src/js/operator/rest.yml
  Naomi/integration/syntaxes/src/js/operator/rest.yml:
    - match: \.{3}
      scope: keyword.operator.rest.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/property.yml:
    - match: (?=(?>'|"|`))
      set:
        - 55_optional-alias
        - 55_string
    - match: \[
      scope: punctuation.definition.object.computed-property.begin.js.fjsx15
      set:
        - 55_optional-alias
        - 55_computed-property-end
        - 55_optional-expression
    - match: (?xi){{55_commonIdentifier}}(?=\s*:)
      scope: meta.binding.destructuring.mapping.key.js.fjsx15
      set:
        - 55_optional-alias
  55_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  55_computed-property-end:
    - match: \]
      scope: punctuation.definition.object.computed-property.end.js.fjsx15
      pop: 'True'
  55_optional-alias:
    - match: ':'
      scope: punctuation.binding.js.fjsx15
      set:
        - 55_optional-parameter
    - match: (?=\S)
      pop: 'True'
  55_optional-parameter:
    - include: 55_comment-no-pop
    - match: (?=\))
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/destructuring/object/index.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.yml
  55_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  55_string:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.no-pop.yml:
    - match: (?=<)
      push:
        - 56_arguments
  56_arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  Naomi/integration/syntaxes/src/js/function/index.yml:
    - include: 59_function-properties
    - match: |
        (?x)
        (?=
          (?:async\s+)?
          function\b
        )
      set:
        - 57_declaration
        - 57_keyword
  57_body:
    - include: Naomi/integration/syntaxes/src/js/function/body.yml
  57_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  57_declaration:
    - meta_scope: meta.declaration.function.js.fjsx15 meta.function.js.fjsx15
    - include: 57_comment-no-pop
    - match: (?=\{)
      set:
        - 57_body
    - match: (?=<)
      push:
        - 57_generic-arguments
    - match: (?=\()
      set:
        - 57_optional-body
        - 57_meta-declaration-scope
        - 57_parameters
    - match: |
        (?xi)
        (?:(\*)\s*)?
        (?:({{57_commonIdentifier}}))?
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.function.js.fjsx15
    - include: 57_else-pop
  57_else-pop:
    - match: (?=\S)
      pop: 'True'
  57_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  57_keyword:
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - match: function\b
      scope: storage.type.function.js.fjsx15
      pop: 'True'
  57_meta-declaration-scope:
    - meta_scope: meta.declaration.function.js.fjsx15
    - match: ''
      pop: 'True'
  57_optional-body:
    - match: (?=\{)
      set:
        - 57_body
    - include: 57_else-pop
  57_parameters:
    - include: Naomi/integration/syntaxes/src/js/function/parameters.yml
  Naomi/integration/syntaxes/src/js/function/body.yml:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 58_close-body
        - 58_optional-statement-or-expression
  58_close-body:
    - meta_scope: meta.function.js.fjsx15 meta.block.js.fjsx15
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - match: ''
      push:
        - 58_optional-statement-or-expression
  58_optional-statement-or-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-statement-or-expression.yml
  Naomi/integration/syntaxes/src/js/core.yml:
    - include: 59_console
    - include: 59_constants
    - include: 59_variables
    - include: 59_functions
    - include: 59_function-properties
    - include: 59_import-properties
    - include: 59_fundamental-objects
    - include: 59_numbers-and-dates
    - include: 59_text-processing
    - include: 59_indexed-collections
    - include: 59_keyed-collections
    - include: 59_structured-data
    - include: 59_control-abstraction-objects
    - include: 59_reflection
    - include: 59_internationalization
    - include: 59_web-assembly
  59_array-property-or-function:
    - match: (?x){{59_arrayFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_arrayFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_arguments:
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  59_console:
    - match: (console)\s*(\.)
      captures:
        1: support.type.object.console.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_console-property-or-function
  59_console-property-or-function:
    - match: error(?=\s*\()
      scope: support.function.console.error.js.fjsx15
      set:
        - 59_console-error-meta-scope
        - 59_arguments
    - match: error\b
      scope: support.function.console.error.js.fjsx15
      pop: 'True'
    - match: info(?=\s*\()
      scope: support.function.console.info.js.fjsx15
      set:
        - 59_console-info-meta-scope
        - 59_arguments
    - match: info\b
      scope: support.function.console.info.js.fjsx15
      pop: 'True'
    - match: log(?=\s*\()
      scope: support.function.console.log.js.fjsx15
      set:
        - 59_console-log-meta-scope
        - 59_arguments
    - match: log\b
      scope: support.function.console.log.js.fjsx15
      pop: 'True'
    - match: warn(?=\s*\()
      scope: support.function.console.warn.js.fjsx15
      set:
        - 59_console-warn-meta-scope
        - 59_arguments
    - match: warn\b
      scope: support.function.console.warn.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_console-error-meta-scope:
    - meta_scope: meta.function-call.console.error.js.fjsx15
    - include: 59_pop-now
  59_console-info-meta-scope:
    - meta_scope: meta.function-call.console.info.js.fjsx15
    - include: 59_pop-now
  59_console-log-meta-scope:
    - meta_scope: meta.function-call.console.log.js.fjsx15
    - include: 59_pop-now
  59_console-warn-meta-scope:
    - meta_scope: meta.function-call.console.warn.js.fjsx15
    - include: 59_pop-now
  59_constants:
    - match: |
        (?x)
        (?> (false)
          | (Infinity)
          | (NaN)
          | (null)
          | (true)
          | (undefined)
        )\b
      captures:
        1: constant.language.boolean.false.js.fjsx15
        2: constant.language.infinity.js.fjsx15
        3: constant.language.nan.js.fjsx15
        4: constant.language.null.js.fjsx15
        5: constant.language.boolean.true.js.fjsx15
        6: constant.language.undefined.js.fjsx15
      pop: 'True'
  59_control-abstraction-objects:
    - match: |
        (?x)
        (?> Generator(?:Function)?
          | Promise
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_date-property-or-function:
    - match: (?x){{59_dateFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_dateFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - include: 59_pop-now
  59_functions:
    - match: (?x){{59_globalFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_globalFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
  59_fundamental-objects:
    - match: (Object)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_object-property-or-function
    - match: (Symbol)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_symbol-property-or-function
    - match: |
        (?x)
        (?> Boolean
          | Error
          | EvalError
          | Function
          | InternalError
          | Object
          | RangeError
          | ReferenceError
          | Symbol
          | SyntaxError
          | TypeError
          | URIError
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_function-properties:
    - match: |
        (?x)
        (function)
        \s*(\.)
        \s*(sent)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.variable.js.fsjx15
      pop: 'True'
  59_import-properties:
    - match: |
        (?x)
        (import)
        \s*(\.)
        \s*(meta)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.variable.js.fsjx15
      pop: 'True'
  59_indexed-collections:
    - match: (Array)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_array-property-or-function
    - match: |
        (?x)
        (?> Array
          | Float(?>32|64)Array
          | Int(?>8|16|32)Array
          | Uint(?>8|16|32)Array
          | Uint8ClampedArray
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_internationalization:
    - match: |
        (?x)
        (Intl)\b
        (?:
          \s*(\.)\s*
          ((?> Collator
            | DateTimeFormat
            | NumberFormat
          ))\b
        )?
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.js.fsjx15
      pop: 'True'
  59_json-property-or-function:
    - match: (?x){{59_jsonFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_jsonFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_keyed-collections:
    - match: |
        (?x)
        (?> Map
          | Set
          | Weak(?>Map|Set)
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_math-property-or-function:
    - match: (?x){{59_mathFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_mathFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (?> E
          | LN(?>10|2)
          | LOG(?>10E|2E)
          | PI
          | SQRT(?>1_2|2)
        )\b
      scope: support.constant.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_numbers-and-dates:
    - match: (Date)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_date-property-or-function
    - match: (Math)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_math-property-or-function
    - match: |
        (?x)
        (?> Date
          | Math
          | Number
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_object-property-or-function:
    - match: (?x){{59_objectFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_objectFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_other-property-or-function:
    - include: 60_other-property-or-function
  59_reflection:
    - match: |
        (?x)
        (?> Proxy
          | Reflect
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_string-property-or-function:
    - match: (?x){{59_stringFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_stringFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_structured-data:
    - match: (JSON)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_json-property-or-function
    - match: |
        (?x)
        (?> ArrayBuffer
          | DataView
          | JSON
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_symbol-property-or-function:
    - match: (?x){{59_symbolFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: (?x){{59_symbolFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - include: 59_other-property-or-function
  59_text-processing:
    - match: (String)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 59_string-property-or-function
    - match: |
        (?x)
        (?> RegExp
          | String
        )\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  59_pop-now:
    - match: ''
      pop: 'True'
  59_variables:
    - match: super(?=\s*\()
      scope: variable.language.super.js.fjsx15
      set:
        - 59_function-call-meta-scope
        - 59_arguments
    - match: prototype\b
      scope: variable.language.prototype.js.fjsx15
      pop: 'True'
    - match: super\b
      scope: variable.language.super.js.fjsx15
      pop: 'True'
    - match: this\b
      scope: variable.language.this.js.fjsx15
      pop: 'True'
  59_web-assembly:
    - match: |
        (?x)
        (WebAssembly)\b
        (?:
          \s*(\.)\s*
          ((?> CompileError
            | Instance
            | LinkError
            | Memory
            | Module
            | RuntimeError
            | Table
          ))\b
        )?
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.js.fsjx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/operator/other.yml:
    - match: yield\b
      scope: keyword.control.flow.js.fjsx15
      set:
        - 60_optional-tail
        - 60_yield-head
    - match: \:{2}
      scope: keyword.operator.bind.js.fjsx15
      set:
        - 60_optional-expression
    - match: \?\?
      scope: keyword.operator.nullish-coalescing.js.fjsx15
      set:
        - 60_optional-expression
    - match: \?\.
      scope: punctuation.accessor.optional-chain.js.fjsx15
      set:
        - 60_optional-tail
        - 60_accessor-head
    - match: \.(?!\.)
      scope: punctuation.accessor.js.fjsx15
      set:
        - 60_optional-tail
        - 60_accessor-head
    - match: \?
      scope: keyword.operator.ternary.js.fjsx15
      set:
        - 60_ternary-else
        - 60_optional-expression
  60_accessor-head:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function-call/index.yml
    - include: 42_function-assigned-to-variable
    - include: Naomi/integration/syntaxes/src/js/constant.yml
    - include: Naomi/integration/syntaxes/src/js/variable.yml
  60_other-property-or-function:
    - match: (?=\S)
      set:
        - 60_optional-tail
        - 60_accessor-head
  60_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  60_optional-tail:
    - include: 4_optional-tail
  60_ternary-else:
    - match: ':'
      scope: keyword.operator.ternary.js.fjsx15
      set:
        - 60_optional-expression
  60_yield-head:
    - include: 4_head
  Naomi/integration/syntaxes/src/js/constant.yml:
    - include: 61_object
    - include: 61_normal
  61_object:
    - match: |
        (?x)
        (\#)?
        ({{61_constantIdentifier}})
        (?=\s*\??\.)
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.object.constant.js.fjsx15
      pop: 'True'
  61_normal:
    - match: |
        (?x)
        (\#)?
        ([_[:upper:]])\b
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.constant.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (\#)?
        (
          {{61_constantIdentifier}}
          (?> \$\B
            | [_[:upper:][:digit:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.constant.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/function-call/index.yml:
    - match: |
        (?xi)
        (?=
          (?:\#\s*)?
          {{62_commonIdentifier}}
          \s*{{62_genericArguments}}
          \s*(\?\.)?
          \s*\(
        )
      set:
        - 62_meta
        - 62_arguments
        - 62_generic-arguments
        - 62_identifier
        - 62_optional-modifier
    - match: |
        (?xi)
        (?=
          (?:\#\s*)?
          {{62_commonIdentifier}}
          (?:\s*{{62_comment}})?
          \s*(\?\.)?
          \s*\(
        )
      set:
        - 62_meta
        - 62_arguments
        - 62_identifier
        - 62_optional-modifier
  62_arguments:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  62_else-pop:
    - match: (?=\S)
      pop: 'True'
  62_identifier:
    - match: (?xi){{62_commonIdentifier}}
      scope: variable.function.js.fjsx15
      pop: 'True'
  62_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  62_meta:
    - meta_scope: meta.function-call.js.fjsx15
    - match: ''
      pop: 'True'
  62_optional-modifier:
    - match: \#
      scope: storage.modifier.js.fjsx15
    - include: 62_else-pop
  Naomi/integration/syntaxes/src/js/function-call/arguments.yml:
    - match: \(
      scope: punctuation.section.group.begin.js.fjsx15
      set:
        - 63_delimiter
  63_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  63_delimiter:
    - meta_scope: meta.group.js.fjsx15
    - include: 63_comment-no-pop
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
    - match: (?=\S)
      push:
        - 63_expression
  63_expression:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  Naomi/integration/syntaxes/src/js/arrow-function/body.yml:
    - match: =>
      scope: storage.type.function.arrow.js.fjsx15
      set:
        - 64_possible-multi-statement-body
  64_close-body:
    - meta_scope: meta.function.js.fjsx15 meta.block.js.fjsx15
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      set:
        - 64_optional-expression-tail
    - match: ''
      push:
        - 64_optional-statement-or-expression
  64_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  64_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  64_optional-expression-tail:
    - include: 4_optional-tail
  64_optional-statement-or-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-statement-or-expression.yml
  64_possible-multi-statement-body:
    - include: 64_comment-no-pop
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 64_close-body
    - include: 64_optional-expression
  Naomi/integration/syntaxes/src/js/destructuring/object/index.yml:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 65_delimiters
  65_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  65_default-value:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  65_delimiters:
    - meta_scope: meta.binding.destructuring.mapping.js.fjsx15
    - include: 65_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml
    - match: (?==)
      push:
        - 65_default-value
    - match: (?=\S)
      set:
        - 65_property-or-variable
  65_property-or-variable:
    - include: 65_comment-no-pop
    - match: (?=[,)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/destructuring/object/property.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/object/index.yml
  Naomi/integration/syntaxes/src/js/destructuring/array.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 66_delimiters
        - 66_optional-expression
        - 66_optional-type
        - 66_optional-variable
  66_delimiters:
    - meta_scope: meta.binding.destructuring.sequence.js.fjsx15
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 66_optional-expression
        - 66_optional-type
        - 66_optional-variable
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15
      pop: 'True'
  66_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  66_optional-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-associated-type.yml
  66_optional-variable:
    - match: (?=[,)\]}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/operator/rest.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/object/index.yml
    - include: 41_variable-or-constant
  Naomi/integration/syntaxes/src/js/destructuring/object/property.yml:
    - match: (?=(?>'|"|`))
      set:
        - 67_optional-bind
        - 67_meta-key
        - 67_string
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 67_optional-bind
        - 67_meta-computed-key
        - 67_computed-property-end
        - 67_optional-expression
    - match: (?xi)({{67_commonIdentifier}})(?=\s*:)
      scope: string.unquoted.js.fjsx15
      set:
        - 67_optional-bind
        - 67_meta-key
    - match: ''
      set:
        - 67_object-destructuring-delimiters
        - 67_variable-or-constant
  67_bind:
    - meta_scope: meta.binding.destructuring.mapping.js.fjsx15
    - include: 67_comment-no-pop
    - match: (?=\))
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/destructuring/array.yml
    - include: Naomi/integration/syntaxes/src/js/destructuring/object/index.yml
    - include: 41_variable-or-constant
  67_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  67_computed-property-end:
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15
      pop: 'True'
  67_meta-computed-key:
    - meta_scope: meta.binding.destructuring.mapping.key.computed.js.fjsx15
    - include: 67_pop-now
  67_meta-key:
    - meta_scope: meta.binding.destructuring.mapping.key.js.fjsx15 meta.object-literal.key.js.fjsx15
    - include: 67_pop-now
  67_object-destructuring-delimiters:
    - meta_scope: meta.binding.destructuring.mapping.js.fjsx15
    - include: 65_delimiters
  67_optional-bind:
    - match: ':'
      scope: punctuation.binding.js.fjsx15
      push:
        - 67_bind
    - match: (?=\S)
      set:
        - 67_object-destructuring-delimiters
  67_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  67_pop-now:
    - match: ''
      pop: 'True'
  67_string:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  67_variable-or-constant:
    - include: 41_variable-or-constant
  Naomi/integration/syntaxes/src/js/class/index.yml:
    - match: class\b
      scope: storage.type.class.js.fjsx15
      set:
        - 68_declaration
  68_body:
    - include: Naomi/integration/syntaxes/src/js/class/body.yml
  68_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  68_declaration:
    - meta_scope: meta.declaration.class.js.fjsx15
    - include: 68_comment-no-pop
    - match: (?=\{)
      set:
        - 68_body
    - match: (?=<)
      push:
        - 68_generic-arguments
    - match: implements\b
      scope: storage.modifier.js.fjsx15
      push:
        - 68_optional-target-class-or-namespace
        - 68_optional-generic-arguments
        - 68_target-class-or-namespace
    - match: extends\b
      scope: storage.modifier.extends.js.fjsx15
      push:
        - 68_optional-generic-arguments
        - 68_target-class-or-namespace
    - match: (?xi){{68_commonIdentifier}}
      scope: entity.name.class.js.fjsx15
  68_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  68_optional-generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
    - match: ''
      pop: 'True'
  68_optional-target-class-or-namespace:
    - match: \,
      scope: punctuation.definition.implement-list.separator.js.fjsx15
      set:
        - 68_optional-target-class-or-namespace
        - 68_optional-generic-arguments
        - 68_target-class-or-namespace
    - match: (?=\{)
      pop: 'True'
  68_target-class-or-namespace:
    - include: 68_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/namespace-path.no-pop.yml
    - match: (?xi){{68_commonIdentifier}}
      scope: entity.other.inherited-class.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/class/body.yml:
    - include: 69_comment-no-pop
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 69_body-end
        - 69_statement-or-expression
  69_body-end:
    - meta_scope: meta.class.js.fjsx15 meta.block.js.fjsx15
    - include: 69_comment-no-pop
    - match: (?>(,)|(;))
      captures:
        1: punctuation.separator.comma.js.fjsx15
        2: punctuation.terminator.js.fjsx15
      push:
        - 69_statement-or-expression
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 69_statement-or-expression
  69_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  69_statement-or-expression:
    - include: 69_comment-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/covariant.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/contravariant.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/decorator.yml
    - include: Naomi/integration/syntaxes/src/js/react-js.yml
    - include: Naomi/integration/syntaxes/src/js/class/modifier.yml
    - include: Naomi/integration/syntaxes/src/js/class/method.yml
    - include: Naomi/integration/syntaxes/src/js/class/property.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/indexer.yml
    - match: (?=\S)
      pop: 'True'
  Naomi/integration/syntaxes/src/js/class/property.yml:
    - include: 42_function-assigned-to-variable
    - match: (?xi)(?={{70_commonIdentifier}})
      set:
        - 70_optional-type-and-value
        - 70_identifier
  70_associated-type:
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.yml
  70_identifier:
    - include: Naomi/integration/syntaxes/src/js/constant.yml
    - include: Naomi/integration/syntaxes/src/js/variable.yml
  70_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  70_optional-type-and-value:
    - match: \?
      scope: keyword.operator.other.optional.flow
    - match: (?=:)
      push:
        - 70_associated-type
    - match: (?==)
      set:
        - 70_optional-expression
    - match: (?=\S)
      pop: 'True'
  Naomi/integration/syntaxes/src/js/class/method.yml:
    - match: (?=\()
      set:
        - 71_declaration
    - match: |
        (?xi)
        (?=
          {{71_methodIdentifier}}
          \s*{{71_genericParameters}}?
          \s*\(
        )
      set:
        - 71_declaration
  71_body:
    - include: Naomi/integration/syntaxes/src/js/function/body.yml
  71_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  71_computed-identifier-end:
    - match: \]
      scope: punctuation.definition.function.identifier.end.js.fjsx15
      pop: 'True'
  71_declaration:
    - meta_scope: meta.declaration.function.method.js.fjsx15 meta.function.js.fjsx15
    - include: 71_comment-no-pop
    - match: (?=\{)
      set:
        - 71_body
    - match: (?=<)
      push:
        - 71_generic-arguments
    - match: (?=\()
      push:
        - 71_parameters
    - match: constructor\b
      scope: entity.name.function.constructor.js.fjsx15
      set:
        - 71_optional-support-body
        - 71_support-parameters
    - match: (?xi){{71_commonIdentifier}}
      scope: entity.name.function.js.fjsx15
    - match: \[
      scope: punctuation.definition.function.identifier.begin.js.fjsx15
      push:
        - 71_computed-identifier-end
        - 71_optional-expression
    - match: (?=['"`])
      push:
        -   - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
            - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
            - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
    - include: 71_else-pop
  71_else-pop:
    - match: (?=\S)
      pop: 'True'
  71_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  71_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  71_optional-support-body:
    - include: 71_body
    - include: 71_else-pop
  71_parameters:
    - include: Naomi/integration/syntaxes/src/js/function/parameters.yml
  71_support-parameters:
    - include: Naomi/integration/syntaxes/src/js/function/parameters.yml
  Naomi/integration/syntaxes/src/js/class/modifier.yml:
    - match: static\b(?!\s*(?>[:,=(]|$))
      scope: storage.modifier.js.fjsx15
      set:
        - 72_modifier-trap
    - match: \#(?!\s*(?>[:,=(]|$))
      scope: storage.modifier.js.fjsx15
      set:
        - 72_modifier-trap
    - match: async\b(?!\s*(?>[:,=(]|$))
      scope: storage.modifier.js.fjsx15
      set:
        - 72_modifier-trap
    - match: (?>get|set)\b(?!\s*(?>[:,=(]|$))
      scope: storage.modifier.js.fjsx15
      set:
        - 72_modifier-trap
    - match: \*(?!\s*(?>[:,=(]|$))
      scope: storage.modifier.js.fjsx15
      set:
        - 72_modifier-trap
  72_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  72_modifier-trap:
    - include: Naomi/integration/syntaxes/src/js/class/modifier.yml
    - match: (?=\S)
      set:
        - 72_property-or-method
  72_property-or-method:
    - include: 72_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/class/method.yml
    - include: Naomi/integration/syntaxes/src/js/class/property.yml
  Naomi/integration/syntaxes/src/js/react-js.yml:
    - include: 73_proptype-functions
    - include: 73_proptypes
    - include: 73_component-functions
    - include: 73_react-functions
    - include: 73_react-dom-functions
  73_arguments:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  73_component-functions:
    - match: (?x){{73_reactFunctions}}(?=\s*\()
      captures:
        1: variable.language.this.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      set:
        - 73_function-call-meta-scope
        - 73_arguments
    - match: (?x){{73_reactFunctions}}
      captures:
        1: variable.language.this.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      pop: 'True'
  73_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - include: 73_pop-now
  73_pop-now:
    - match: ''
      pop: 'True'
  73_proptypes:
    - match: |
        (?x)
        (?:
          (React)
          \s*(\.)\s*
        )?
        (PropTypes)
        \s*(\.)\s*
        ((?> any
          | array
          | bool
          | element
          | func
          | node
          | number
          | object
          | symbol
          | string
        ))\b
        (?:
          \s*(\.)\s*
          (isRequired\b)
        )?
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.object.fjsx15
        4: punctuation.accessor.js.fjsx15
        5: support.type.object.fjsx15
        6: punctuation.accessor.js.fjsx15
        7: support.type.object.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (?<=\))
        \s*(\.)\s*
        (isRequired\b)
      captures:
        1: punctuation.accessor.js.fjsx15
        2: support.type.object.fjsx15
      pop: 'True'
  73_proptype-functions:
    - match: (?x){{73_propTypeFunctions}}(?=\s*\()
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.object.fjsx15
        4: punctuation.accessor.js.fjsx15
        5: support.function.fjsx15
      set:
        - 73_function-call-meta-scope
        - 73_arguments
    - match: (?x){{73_propTypeFunctions}}
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.type.object.fjsx15
        4: punctuation.accessor.js.fjsx15
        5: support.function.fjsx15
      pop: 'True'
  73_react-dom-functions:
    - match: (?x){{73_reactDomFunctions}}(?=\s*\()
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      set:
        - 73_function-call-meta-scope
        - 73_arguments
    - match: (?x){{73_reactDomFunctions}}
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      pop: 'True'
  73_react-functions:
    - match: (?x){{73_reactFunctions}}(?=\s*\()
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      set:
        - 73_function-call-meta-scope
        - 73_arguments
    - match: (?x){{73_reactFunctions}}
      captures:
        1: support.type.object.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/decorator.yml:
    - match: (?xi)(@)(?={{74_decoratorIdentifier}})
      scope: punctuation.definition.annotation.js.fjsx15
      set:
        - 74_meta
        - 74_decorator-identifier
  74_arguments:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  74_decorator-identifier:
    - match: (?xi){{74_decoratorIdentifier}}(?=\s*\()
      scope: variable.annotation.js.fjsx15
      set:
        - 74_possible-chain
        - 74_arguments
    - match: (?xi){{74_decoratorIdentifier}}
      scope: variable.annotation.js.fjsx15
      set:
        - 74_possible-chain
  74_meta:
    - meta_scope: meta.annotation.js.fjsx15
    - match: ''
      pop: 'True'
  74_possible-chain:
    - match: \.
      scope: punctuation.definition.decorator.chain.js.fjsx15
      set:
        - 74_decorator-identifier
    - match: (?=\S)
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/operator/contravariant.no-pop.yml:
    - match: \-
      scope: storage.modifier.contravariant.flow
  Naomi/integration/syntaxes/src/facebook-flow/operator/covariant.no-pop.yml:
    - match: \+
      scope: storage.modifier.covariant.flow
  Naomi/integration/syntaxes/src/js/export.yml:
    - match: export\b
      scope: keyword.control.import-export.export.js.fjsx15
      set:
        - 77_possible-statement-or-expression
  77_alias:
    - match: as\b
      scope: keyword.control.import-export.as.js.fjsx15
      set:
        - 77_alias-name
  77_alias-name:
    - match: (?xi){{77_commonIdentifier}}
      scope: variable.other.readwrite.js.fjsx15
      pop: 'True'
  77_close-block:
    - include: 78_close-block
  77_delimiter:
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 77_optional-target
    - include: 77_origin
    - include: 77_else-pop
  77_else-pop:
    - match: (?=\S)
      pop: 'True'
  77_expression:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  77_optional-alias:
    - match: (?=as\b)
      set:
        - 77_alias
    - include: 77_else-pop
  77_optional-target:
    - match: (?=(?>[,}]|from))
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-export.yml
    - match: \*(?=\s*as\b)
      scope: keyword.control.import-export.star.js.fjsx15
      set:
        - 77_alias
    - match: \*
      scope: keyword.control.import-export.star.js.fjsx15
      pop: 'True'
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 77_close-block
        - 77_delimiter
        - 77_optional-target
    - match: default\b
      scope: keyword.control.import-export.default.js.fjsx15
      set:
        - 77_optional-alias
    - match: (?xi){{77_commonIdentifier}}(?=\s+as\b)
      scope: variable.other.readwrite.js.fjsx15
      set:
        - 77_alias
    - match: (?xi){{77_commonIdentifier}}
      scope: variable.other.readwrite.js.fjsx15
      pop: 'True'
  77_origin:
    - include: 78_origin
  77_possible-statement-or-expression:
    - match: (?=(?>[*{]|type(?:of)?))
      set:
        - 77_delimiter
        - 77_optional-target
    - match: default\b(?=\s+from\b)
      scope: keyword.control.import-export.default.js.fjsx15
      set:
        - 77_origin
    - match: default\b
      scope: keyword.control.import-export.default.js.fjsx15
      set:
        - 77_expression
    - include: Naomi/integration/syntaxes/src/js/statement.yml
    - match: (?xi){{77_commonIdentifier}}
      scope: variable.other.readwrite.js.fjsx15
      set:
        - 77_origin
  Naomi/integration/syntaxes/src/js/import.yml:
    - include: 59_import-properties
    - match: import\b(?=\s*\()
      scope: support.function.import.js.fjsx15
      set:
        - 78_function-call-meta-scope
        - 78_arguments
    - match: (?x)import\b(?=\s*(?>"|'|`))
      scope: keyword.control.import-export.import.js.fjsx15
      set:
        - 78_origin-path
    - match: (?x)import\b
      scope: keyword.control.import-export.import.js.fjsx15
      set:
        - 78_delimiter
        - 78_optional-target
  78_alias:
    - match: as\b
      scope: keyword.control.import-export.as.js.fjsx15
      set:
        - 78_alias-name
  78_alias-name:
    - match: (?xi){{78_commonIdentifier}}
      scope: variable.other.readwrite.js.fjsx15
      pop: 'True'
  78_arguments:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  78_block-optional-target:
    - include: 78_comment-no-pop
    - match: (?=(?>[,}]))
      pop: 'True'
    - include: 78_shared-optional-target
  78_close-block:
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
  78_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  78_delimiter:
    - include: 78_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 78_optional-target
    - include: 78_origin
    - include: 78_else-pop
  78_else-pop:
    - match: (?=\S)
      pop: 'True'
  78_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - match: ''
      pop: 'True'
  78_origin:
    - include: 78_comment-no-pop
    - match: from\b
      scope: keyword.control.import-export.origin.js.fjsx15
      set:
        - 78_origin-path
  78_origin-path:
    - include: 78_comment-no-pop
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  78_optional-target:
    - include: 78_comment-no-pop
    - match: (?=(?>[,}]|from))
      pop: 'True'
    - include: 78_shared-optional-target
  78_shared-optional-target:
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-import.yml
    - match: \*(?=\s*as)
      scope: keyword.control.import-export.star.js.fjsx15
      set:
        - 78_alias
    - match: \*
      scope: keyword.control.import-export.star.js.fjsx15
      pop: 'True'
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 78_close-block
        - 78_delimiter
        - 78_block-optional-target
    - match: (?xi){{78_commonIdentifier}}(?=\s+as)
      scope: variable.other.readwrite.js.fjsx15
      set:
        - 78_alias
    - match: (?xi){{78_commonIdentifier}}
      scope: variable.other.readwrite.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/type-import.yml:
    - match: typeof\b
      scope: keyword.operator.word.typeof.flow
      set:
        - 79_optional-target
    - match: type\b
      scope: storage.type.flow
      set:
        - 79_optional-target
  79_alias:
    - match: as\b
      scope: keyword.control.import-export.as.js.fjsx15
      set:
        - 79_alias-name
  79_alias-name:
    - match: (?xi){{79_commonIdentifier}}
      scope: entity.name.type.js.fjsx15
      pop: 'True'
  79_close-block:
    - include: 78_close-block
  79_delimiter:
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 79_optional-target
    - include: 79_origin
    - include: 79_else-pop
  79_else-pop:
    - match: (?=\S)
      pop: 'True'
  79_optional-target:
    - match: (?=(?>[,}]|from))
      pop: 'True'
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 79_close-block
        - 79_delimiter
        - 79_optional-target
    - match: (?xi){{79_commonIdentifier}}(?=\s+as)
      scope: variable.other.type.js.fjsx15
      set:
        - 79_alias
    - match: (?xi){{79_commonIdentifier}}
      scope: entity.name.type.js.fjsx15
      pop: 'True'
  79_origin:
    - include: 78_origin
  Naomi/integration/syntaxes/src/facebook-flow/type-export.yml:
    - match: typeof\b
      scope: keyword.operator.word.typeof.flow
      set:
        - 80_optional-target
    - match: |
        (?xi)
        (?=
          type
          \s+{{80_commonIdentifier}}
        )
      set:
        - 80_type-aliasing
    - match: type\b
      scope: storage.type.flow
      set:
        - 80_optional-target
  80_alias:
    - match: as\b
      scope: keyword.control.import-export.as.js.fjsx15
      set:
        - 80_alias-name
  80_alias-name:
    - match: (?xi){{80_commonIdentifier}}
      scope: variable.other.type.js.fjsx15
      pop: 'True'
  80_close-block:
    - include: 78_close-block
  80_delimiter:
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 80_optional-target
    - include: 80_origin
    - include: 80_else-pop
  80_else-pop:
    - match: (?=\S)
      pop: 'True'
  80_optional-target:
    - match: (?=(?>[,}]|from))
      pop: 'True'
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 80_close-block
        - 80_delimiter
        - 80_optional-target
    - match: (?xi){{80_commonIdentifier}}(?=\s+as)
      scope: variable.other.type.js.fjsx15
      set:
        - 80_alias
    - match: (?xi){{80_commonIdentifier}}
      scope: variable.other.type.js.fjsx15
      pop: 'True'
  80_origin:
    - include: 78_origin
  80_type-aliasing:
    - include: Naomi/integration/syntaxes/src/facebook-flow/type-aliasing.yml
  Naomi/integration/syntaxes/src/facebook-flow/type-aliasing.yml:
    - match: |
        (?xi)
        (?:(opaque)\s+)?
        (type)\b
        (?=\s+
          {{81_commonIdentifier}}
          {{81_genericArguments}}?
        )
      captures:
        1: storage.modifier.opaque.flow
        2: storage.type.flow
      set:
        - 81_punctuation
        - 81_identifier
  81_identifier:
    - match: (?xi){{81_commonIdentifier}}
      scope: entity.name.type.flow
      pop: 'True'
  81_meta-scope:
    - meta_scope: meta.declaration.type.flow
    - match: ''
      pop: 'True'
  81_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  81_punctuation:
    - meta_scope: meta.declaration.type.flow
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/associated-type.no-pop.yml
    - match: '='
      scope: keyword.operator.other.assignment.flow
      set:
        - 81_meta-scope
        - 81_optional-type-expression
  Naomi/integration/syntaxes/src/facebook-flow/interface.yml:
    - match: interface\b
      scope: storage.type.interface.flow
      set:
        - 82_declaration
  82_body:
    - include: 82_comment-no-pop
    - match: \{
      scope: punctuation.section.block.begin.flow
      set:
        - 82_body-end
  82_body-end:
    - include: 82_comment-no-pop
    - match: (?>(,)|(;))
      captures:
        1: punctuation.separator.comma.flow
        2: punctuation.terminator.flow
    - match: \}
      scope: punctuation.section.block.end.flow
      pop: 'True'
    - match: (?=\S)
      push:
        - 82_statement-or-expression
  82_comment:
    - include: Naomi/integration/syntaxes/src/js/comment/index.yml
  82_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  82_co-contra-variant-no-pop:
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/covariant.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/operator/contravariant.no-pop.yml
  82_declaration:
    - include: 82_comment-no-pop
    - match: extends\b
      scope: storage.modifier.extends.flow
      push:
        - 82_optional-type-expression
    - match: (?=<)
      push:
        - 82_generic-arguments
    - match: (?=\{)
      set:
        - 82_body
    - match: (?xi){{82_commonIdentifier}}
      scope: entity.name.interface.flow
  82_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  82_optional-type-expression:
    - include: Naomi/integration/syntaxes/src/facebook-flow/optional-type-expression.yml
  82_statement-or-expression:
    - include: 82_comment
    - include: 82_co-contra-variant-no-pop
    - include: Naomi/integration/syntaxes/src/facebook-flow/indexer.yml
    - include: Naomi/integration/syntaxes/src/js/class/method.yml
    - include: Naomi/integration/syntaxes/src/js/class/property.yml
  Naomi/integration/syntaxes/src/facebook-flow/declare.yml:
    - match: declare\b
      scope: keyword.declaration.flow
      set:
        - 83_possible-module
  83_possible-module:
    - include: Naomi/integration/syntaxes/src/facebook-flow/module.yml
    - match: (?=\S)
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-flow/module.yml:
    - match: (?=module\s*.\s*exports)
      set:
        - 84_object-literal
        - 84_association
        - 84_common-js-module
    - match: module\b
      scope: storage.type.module.flow
      set:
        - 84_identifier
  84_association:
    - match: ':'
      scope: keyword.operator.other.flow
      pop: 'True'
  84_common-js-module:
    - include: Naomi/integration/syntaxes/src/js/node-js.yml
  84_identifier:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
    - match: (?xi){{84_commonIdentifier}}
      scope: entity.name.module.flow
      pop: 'True'
  84_object-literal:
    - include: Naomi/integration/syntaxes/src/js/literal/object/index.yml
  Naomi/integration/syntaxes/src/js/literal/object/index.yml:
    - match: \{
      scope: punctuation.section.block.begin.js.fjsx15
      set:
        - 85_delimiters
  85_anything-else:
    - include: 85_comment-no-pop
    - match: (?=[,}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/operator/spread.yml
    - include: Naomi/integration/syntaxes/src/js/class/modifier.yml
    - include: Naomi/integration/syntaxes/src/js/class/method.yml
    - include: Naomi/integration/syntaxes/src/js/literal/object/property.yml
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  85_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  85_delimiters:
    - meta_scope: meta.object-literal.js.fjsx15 meta.block.js.fjsx15
    - include: 85_comment-no-pop
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
    - match: \}
      scope: punctuation.section.block.end.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 85_anything-else
  Naomi/integration/syntaxes/src/js/literal/object/property.yml:
    - match: |
        (?xi)
        (?=
          {{86_keyIdentifier}}
          \s*:\s*
          (?:async\b\s+)?
          function
          (?> \s+{{86_commonIdentifier}}
            | \(
          )
        )
      set:
        - 86_function-declaration
        - 86_meta-declaration-function
        - 86_function-keyword
        - 86_meta-key
        - 86_method-identifier
    - match: |
        (?xi)
        (?=
          {{86_keyIdentifier}}
          \s*:\s*
          {{86_singleParameterArrowFunction}}
        )
      set:
        - 86_arrow-function
        - 86_meta-key
        - 86_method-identifier
    - match: |
        (?xi)
        (?=
          {{86_keyIdentifier}}
          \s*:\s*
          {{86_normalArrowFunction}}
        )
      set:
        - 86_arrow-function
        - 86_meta-key
        - 86_method-identifier
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 86_associated-value
        - 86_meta-computed-key
        - 86_computed-property-end
        - 86_optional-expression
    - match: |
        (?xi)
        (?=
          {{86_keyIdentifier}}
          \s*:
        )
      set:
        - 86_associated-value
        - 86_meta-key
        - 86_any-key
  86_any-key:
    - include: 86_string
    - include: 86_number
    - match: '[^:]*'
      scope: string.unquoted.js.fjsx15
      pop: 'True'
  86_arrow-function:
    - include: Naomi/integration/syntaxes/src/js/arrow-function/index.yml
  86_associated-value:
    - match: ':'
      scope: punctuation.separator.key-value.js.fjsx15
      set:
        - 86_optional-expression
  86_computed-property-end:
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15
      pop: 'True'
  86_function-declaration:
    - include: 57_declaration
  86_function-keyword:
    - include: 57_keyword
  86_meta-computed-key:
    - meta_scope: meta.object-literal.key.computed.js.fjsx15
    - include: 86_pop-now
  86_meta-declaration-function:
    - meta_scope: meta.declaration.function.js.fjsx15
    - include: 86_pop-now
  86_meta-key:
    - meta_scope: meta.object-literal.key.js.fjsx15
    - include: 86_pop-now
  86_method-identifier:
    - match: |
        (?xi)
        ({{86_keyIdentifier}})
        \s*(:)
      captures:
        1: entity.name.function.js.fjsx15
        2: punctuation.separator.key-value.js.fjsx15
      pop: 'True'
  86_number:
    - include: Naomi/integration/syntaxes/src/js/literal/number.yml
  86_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  86_pop-now:
    - match: ''
      pop: 'True'
  86_string:
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
  Naomi/integration/syntaxes/src/js/arrow-function/index.yml:
    - match: |
        (?xi)
        (?={{87_normalArrowFunction}})
      set:
        - 87_normal-arrow-function
    - match: |
        (?xi)
        (?={{87_singleParameterArrowFunction}})
      set:
        - 87_single-parameter-arrow-function
  87_normal-arrow-function:
    - meta_scope: meta.function.js.fjsx15
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameters.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/arrow-function/body.yml
  87_single-parameter-arrow-function:
    - meta_scope: meta.function.js.fjsx15
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/function/parameter/simple.no-pop.yml
    - include: Naomi/integration/syntaxes/src/js/arrow-function/body.yml
  Naomi/integration/syntaxes/src/js/operator/spread.yml:
    - match: \.{3}
      scope: keyword.operator.spread.js.fjsx15
      set:
        - 88_optional-expression
  88_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/node-js.yml:
    - include: 89_global-constant
    - include: 89_global-function
    - match: (module)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 89_module-property-or-function
    - match: (process)\s*(\.)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 89_process-property-or-function
    - match: (?>module|process)\b
      scope: support.type.object.js.fjsx15
      pop: 'True'
  89_arguments:
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  89_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - include: 89_pop-now
  89_global-constant:
    - match: __(?>dirname|filename)\b
      scope: support.constant.js.fjsx15
      pop: 'True'
  89_global-function:
    - match: (?x){{89_globalFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 89_function-call-meta-scope
        - 89_arguments
    - match: (?x){{89_globalFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
  89_module-property-or-function:
    - match: (?>default|exports|parent)\b
      scope: support.variable.js.fjsx15
      pop: 'True'
    - include: 89_other-property-or-function
  89_other-property-or-function:
    - include: 60_other-property-or-function
  89_pop-now:
    - match: ''
      pop: 'True'
  89_process-property-or-function:
    - match: (?x){{89_processFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 89_function-call-meta-scope
        - 89_arguments
    - match: (?x){{89_processFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        # arch, argv, argv0
        (?> ar(?>ch|gv0?)
          | channel
          | config
          | connected
          | env
          # execArgv, execPath
          | exec(?>Argv|Path)
          | exitCode
          | mainModule
          | pid
          | platform
          | release
          # stderr, stdin, stdout
          | std(?>err|in|out)
          | title
          # version, versions
          | versions?
        )\b
      scope: support.variable.js.fjsx15
      pop: 'True'
    - include: 89_other-property-or-function
  Naomi/integration/syntaxes/src/facebook-flow/prolog.yml:
    - match: |
        (?x)
        (?> //\s*@flow
          | /\*\s*@flow\s\*/
        )
      scope: keyword.other.prolog.flow
      pop: 'True'
  Naomi/integration/syntaxes/src/js/operator/index.yml:
    - include: Naomi/integration/syntaxes/src/js/arrow-function/body.yml
    - include: Naomi/integration/syntaxes/src/js/operator/pipe.yml
    - include: Naomi/integration/syntaxes/src/js/operator/comparison.yml
    - include: Naomi/integration/syntaxes/src/js/operator/assignment.yml
    - include: Naomi/integration/syntaxes/src/js/operator/arithmetic.yml
    - include: Naomi/integration/syntaxes/src/js/operator/await.yml
    - include: Naomi/integration/syntaxes/src/js/operator/bitwise.yml
    - include: Naomi/integration/syntaxes/src/js/operator/delete.yml
    - include: Naomi/integration/syntaxes/src/js/operator/in.yml
    - include: Naomi/integration/syntaxes/src/js/operator/logical.yml
    - include: Naomi/integration/syntaxes/src/js/operator/new.yml
    - include: Naomi/integration/syntaxes/src/js/operator/of.yml
    - include: Naomi/integration/syntaxes/src/js/operator/other.yml
    - include: Naomi/integration/syntaxes/src/js/operator/relational.yml
    - include: Naomi/integration/syntaxes/src/js/operator/shebang.yml
    - include: Naomi/integration/syntaxes/src/js/operator/spread.yml
    - include: Naomi/integration/syntaxes/src/js/operator/typeof.yml
    - include: Naomi/integration/syntaxes/src/js/operator/void.yml
  Naomi/integration/syntaxes/src/js/operator/void.yml:
    - match: void\b
      scope: keyword.operator.word.void.js.fjsx15
      set:
        - 92_optional-expression
  92_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/typeof.yml:
    - match: (?xi)(typeof)(?=\s+{{93_commonIdentifier}})
      scope: keyword.operator.word.typeof.js.fjsx15
      set:
        - 93_optional-tail
        - 93_type
    - match: (?i)typeof\b
      scope: keyword.operator.word.typeof.js.fjsx15
      set:
        - 93_optional-tail
  93_optional-tail:
    - include: 4_optional-tail
  93_type:
    - include: 94_type
  Naomi/integration/syntaxes/src/js/operator/new.yml:
    - match: (new)\s*(\.)\s*(target)
      captures:
        1: support.type.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.constant.js.fjsx15
      pop: 'True'
    - match: (?xi)new(?=\s+{{94_commonIdentifier}})
      scope: keyword.operator.word.new.js.fjsx15
      set:
        - 94_optional-tail
        - 94_meta-instance-call-constructor-scope
        - 94_optional-arguments
        - 94_type
    - match: (?i)new\b
      scope: keyword.operator.word.new.js.fjsx15
      set:
        - 94_optional-tail
        - 94_meta-instance-scope
        - 94_optional-expression
  94_arguments:
    - include: 62_arguments
  94_else-pop:
    - match: (?=\S)
      pop: 'True'
  94_meta-instance-call-constructor-scope:
    - meta_scope: meta.instance.constructor.js.fjsx15
    - meta_content_scope: meta.function-call.constructor.js.fjsx15
    - include: 94_pop-now
  94_meta-instance-scope:
    - meta_scope: meta.instance.js.fjsx15
    - include: 94_pop-now
  94_optional-arguments:
    - match: (?=\()
      set:
        - 94_arguments
    - include: 94_else-pop
  94_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  94_optional-tail:
    - include: 4_optional-tail
  94_pop-now:
    - match: ''
      pop: 'True'
  94_type:
    - include: Naomi/integration/syntaxes/src/js/core.yml
    - match: (?xi)({{94_commonIdentifier}})\s*(\.)
      captures:
        1: variable.other.object.js.fjsx15
        2: punctuation.accessor.js.fjsx15
    - match: (?x){{94_classIdentifier}}
      scope: variable.other.type.js.fjsx15
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  Naomi/integration/syntaxes/src/js/operator/shebang.yml:
    - match: ^#!.+$
      scope: keyword.operator.other.shebang.js.fjsx15
  Naomi/integration/syntaxes/src/js/operator/relational.yml:
    - match: instanceof\b
      scope: keyword.operator.word.instanceof.js.fjsx15
      set:
        - 96_optional-expression
    - match: in\b
      scope: keyword.operator.word.in.js.fjsx15
      set:
        - 96_optional-expression
  96_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/of.yml:
    - match: of\b
      scope: keyword.operator.word.of.js.fjsx15
      set:
        - 97_optional-expression
  97_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/logical.yml:
    - match: |
        (?x)
        (?> &&
          | \|\|
          | !!?
        )
      scope: keyword.operator.logical.js.fjsx15
      set:
        - 98_optional-expression
  98_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/in.yml:
    - match: in\b
      scope: keyword.operator.word.in.js.fjsx15
      set:
        - 99_optional-expression
  99_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/delete.yml:
    - match: delete\b
      scope: keyword.operator.word.delete.js.fjsx15
      set:
        - 100_optional-expression
  100_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/bitwise.yml:
    - match: |
        (?x)
        (?> ~=?
          | &(?!&)=?
          | \|(?!\|)=?
          | \^=?
          | <<=?
          | >>>=?
          | >>=?
        )
      scope: keyword.operator.bitwise.js.fjsx15
      set:
        - 101_optional-expression
  101_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/arithmetic.yml:
    - match: |
        (?x)
        (?> --
          | \+\+
        )
      scope: keyword.operator.arithmetic.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (?> -=?
          | \+=?
          | \*\*?=?
          | /=?
          | %=?
        )
      scope: keyword.operator.arithmetic.js.fjsx15
      set:
        - 102_optional-expression
  102_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/assignment.yml:
    - match: \=
      scope: keyword.operator.other.assignment.js.fjsx15
      set:
        - 103_optional-expression
  103_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/comparison.yml:
    - match: |
        (?x)
        (?> ===?
          | !==?
          | >=
          | <=
          | >(?!>)
          | <(?!<)
        )
      scope: keyword.operator.comparison.js.fjsx15
      set:
        - 104_optional-expression
  104_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/operator/pipe.yml:
    - match: \|>
      scope: keyword.operator.pipe.js.fjsx15
      set:
        - 105_target
  105_else-pop:
    - match: (?=\S)
      pop: 'True'
  105_target:
    - include: Naomi/integration/syntaxes/src/js/arrow-function/index.yml
    - match: await\b
      scope: keyword.control.flow.js.fjsx15
      set:
        - 105_function-identifier
    - match: |
        (?xi)
        (?=
          {{105_commonIdentifier}}\s*
          (?>\|>|$)
        )
      set:
        - 105_function-identifier
    - include: 105_else-pop
  105_function-identifier:
    - match: (?xi){{105_commonIdentifier}}
      scope: meta.function-call.js.fjsx15 variable.function.js.fjsx15
      pop: 'True'
    - include: 105_else-pop
  Naomi/integration/syntaxes/src/js/jsx1-early.yml:
    - match: (?xi)(?=<(?>\s*>|{{106_commonIdentifier}}))
      set:
        - 106_meta
        - 106_jsx
  106_jsx:
    - include: 107_jsx
  106_meta:
    - clear_scopes: true
    - meta_scope: source.jsx naomi
    - match: ''
      pop: 'True'
  Naomi/integration/syntaxes/src/js/jsx1.yml:
    - match: (?xi)(?=<(?>\s*>|{{107_commonIdentifier}}))
      set:
        - 107_meta
        - 107_jsx
  107_jsx:
    - include: 112_with-js-fence
    - include: 111_with-js-fence
    - include: 108_with-js-fence
  107_meta:
    - clear_scopes: true
    - meta_scope: source.jsx naomi
    - match: ''
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-jsx/element.yml:
    - match: |
        (?xi)
        (<)
        (?:
          \s*({{108_namespaceIdentifier}})
          \s*(:)
        )?
        \s*({{108_elementIdentifier}})
      captures:
        1: punctuation.definition.tag.begin.html.jsx.jsx1
        2: entity.name.tag.namespace.html.jsx.jsx1
        3: punctuation.separator.namespace.html.jsx.jsx1
        4: entity.name.tag.html.jsx.jsx1
      set:
        - 108_meta
        - 108_namespaced-closing-tag
        - 108_close-open-tag
  108_close-open-tag:
    - include: 109_close-open-tag
  108_meta:
    - meta_scope: meta.tag.other.html.jsx.jsx1
    - include: 108_pop-now
  108_namespaced-closing-tag:
    - include: 109_namespaced-closing-tag
  108_pop-now:
    - match: ''
      pop: 'True'
  108_with-js-fence:
    - match: |
        (?xi)
        (<)
        (?:
          \s*({{108_namespaceIdentifier}})
          \s*(:)
        )?
        \s*({{108_elementIdentifier}})
      captures:
        1: meta.jsx-fence.jsx.jsx1 punctuation.definition.tag.begin.jsx.jsx1
        2: entity.name.tag.namespace.html.jsx.jsx1
        3: punctuation.separator.namespace.html.jsx.jsx1
        4: entity.name.tag.html.jsx.jsx1
      set:
        - 108_meta
        - 108_namespaced-closing-tag
        - 108_close-open-tag
  109_attribute:
    - include: Naomi/integration/syntaxes/src/facebook-jsx/attribute.yml
  109_close-open-tag:
    - match: (?=/>)
      pop: 'True'
    - match: \>
      scope: punctuation.definition.tag.end.html.jsx.jsx1
      pop: 'True'
    - match: (?=\S)
      push:
        - 109_attribute
  109_component-closing-tag:
    - include: 109_self-closing-tag
    - match: |
        (?x)
        (
          (</)
          (?> (\2)(:)(\4)
            | (\4)
          )
          (>)
        )
      captures:
        1: meta.tag.close.html.jsx.jsx1
        2: punctuation.definition.tag.begin.html.jsx.jsx1
        3: entity.name.tag.namespace.html.jsx.jsx1
        4: punctuation.separator.namespace.html.jsx.jsx1
        5: entity.name.tag.component.jsx.jsx1
        6: entity.name.tag.component.jsx.jsx1
        7: punctuation.definition.tag.end.html.jsx.jsx1
      pop: 'True'
    - match: (?=.|\n)
      push:
        - 109_meta-content
        - 109_content
  109_content:
    - include: Naomi/integration/syntaxes/src/facebook-jsx/fragment.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/component.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/element.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/embedded-js.yml
    - match: .|\n
      pop: 'True'
  109_meta-content:
    - clear_scopes: true
    - meta_scope: source.jsx naomi
    - include: 109_pop-now
  109_namespaced-closing-tag:
    - include: 109_self-closing-tag
    - match: |
        (?x)
        (
          (</)
          (?> (\2)(:)(\4)
            | (\4)
          )
          (>)
        )
      captures:
        1: meta.tag.close.html.jsx.jsx1
        2: punctuation.definition.tag.begin.html.jsx.jsx1
        3: entity.name.tag.namespace.html.jsx.jsx1
        4: punctuation.separator.namespace.html.jsx.jsx1
        5: entity.name.tag.jsx.jsx1
        6: entity.name.tag.jsx.jsx1
        7: punctuation.definition.tag.end.html.jsx.jsx1
      pop: 'True'
    - match: (?=.|\n)
      push:
        - 109_meta-content
        - 109_content
  109_pop-now:
    - match: ''
      pop: 'True'
  109_self-closing-tag:
    - match: />
      scope: punctuation.definition.tag.end.html.jsx.jsx1
      pop: 'True'
  109_simple-closing-tag:
    - include: 109_self-closing-tag
    - match: ((</)(\2)(>))
      captures:
        1: meta.tag.close.html.jsx.jsx1
        2: punctuation.definition.tag.begin.html.jsx.jsx1
        3: entity.name.tag.html.jsx.jsx1
        4: punctuation.definition.tag.end.html.jsx.jsx1
      pop: 'True'
    - match: (?=.|\n)
      push:
        - 109_meta-content
        - 109_content
  109_trap:
    - match: .
      scope: trap.jsx1
  Naomi/integration/syntaxes/src/facebook-jsx/embedded-js.yml:
    - match: \{
      scope: punctuation.definition.template-expression.begin.html.jsx.jsx1
      set:
        - 110_meta
        - 110_close
        - 110_content
  110_close:
    - match: \}
      scope: punctuation.definition.template-expression.end.html.jsx.jsx1
      pop: 'True'
  110_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  110_content:
    - clear_scopes: true
    - meta_content_scope: source.js naomi
    - match: (?=})
      pop: 'True'
    - include: 110_comment-no-pop
    - match: (?=\S)
      push:
        - 110_expression
  110_expression:
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  110_meta:
    - meta_scope: meta.embedded-js.jsx.jsx1
    - match: ''
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-jsx/component.yml:
    - match: |
        (?x)
        (<)
        (?:
          \s*({{111_namespaceIdentifier}})
          \s*(:)
        )?
        \s*({{111_componentIdentifier}})
      captures:
        1: punctuation.definition.tag.begin.html.jsx.jsx1
        2: entity.name.tag.namespace.html.jsx.jsx1
        3: punctuation.separator.namespace.html.jsx.jsx1
        4: entity.name.tag.component.jsx.jsx1
      set:
        - 111_meta
        - 111_namespaced-closing-tag
        - 111_close-open-tag
  111_close-open-tag:
    - include: 109_close-open-tag
  111_meta:
    - meta_scope: meta.tag.other.component.html.jsx.jsx1
    - match: ''
      pop: 'True'
  111_namespaced-closing-tag:
    - include: 109_component-closing-tag
  111_with-js-fence:
    - match: |
        (?x)
        (<)
        (?:
          \s*({{111_namespaceIdentifier}})
          \s*(:)
        )?
        \s*({{111_componentIdentifier}})
      captures:
        1: meta.jsx-fence.jsx.jsx1 punctuation.definition.tag.begin.jsx.jsx1
        2: entity.name.tag.namespace.html.jsx.jsx1
        3: punctuation.separator.namespace.html.jsx.jsx1
        4: entity.name.tag.component.jsx.jsx1
      set:
        - 111_meta
        - 111_namespaced-closing-tag
        - 111_close-open-tag
  Naomi/integration/syntaxes/src/facebook-jsx/fragment.yml:
    - match: (<)\s*(>)
      captures:
        1: punctuation.definition.tag.begin.jsx.jsx1
        2: punctuation.definition.tag.end.jsx.jsx1
      set:
        - 112_meta
        - 112_closing-tag
  112_closing-tag:
    - match: ((</)(>))
      captures:
        1: meta.tag.close.jsx.jsx1
        2: punctuation.definition.tag.begin.jsx.jsx1
        3: punctuation.definition.tag.end.jsx.jsx1
      pop: 'True'
    - match: (?=.|\n)
      push:
        - 112_meta-content
        - 112_content
  112_content:
    - include: 109_content
  112_meta:
    - meta_scope: meta.tag.other.fragment.jsx.jsx1
    - include: 112_pop-now
  112_meta-content:
    - clear_scopes: true
    - meta_scope: source.jsx naomi
    - include: 112_pop-now
  112_pop-now:
    - match: ''
      pop: 'True'
  112_with-js-fence:
    - match: (<)\s*(>)
      captures:
        1: meta.jsx-fence.jsx.jsx1 punctuation.definition.tag.begin.jsx.jsx1
        2: punctuation.definition.tag.end.jsx.jsx1
      set:
        - 112_meta
        - 112_closing-tag
  Naomi/integration/syntaxes/src/facebook-jsx/attribute.yml:
    - include: Naomi/integration/syntaxes/src/facebook-flow/prolog.yml
    - include: Naomi/integration/syntaxes/src/js/comment/eslint.yml
    - include: Naomi/integration/syntaxes/src/js/comment/docblock.yml
    - include: Naomi/integration/syntaxes/src/js/comment/block.yml
    - include: Naomi/integration/syntaxes/src/js/comment/line.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/embedded-js.yml
    - include: 113_dangerous
    - include: 113_key
    - include: 113_ref
    - include: 113_fallback
  113_dangerous:
    - match: dangerouslySetInnerHTML\b(?=\s*=)
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.dangerous.html.jsx.jsx1
      set:
        - 113_meta
        - 113_optional-value
    - match: dangerouslySetInnerHTML\b
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.dangerous.html.jsx.jsx1
      pop: 'True'
  113_else-pop:
    - match: (?=\S)
      pop: 'True'
  113_key:
    - match: key(?=\s*=)
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.key.html.jsx.jsx1
      set:
        - 113_meta
        - 113_optional-value
    - match: key\b
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.key.html.jsx.jsx1
      pop: 'True'
  113_optional-value:
    - match: '='
      scope: punctuation.separator.key-value.html.jsx.jsx1
      set:
        - 113_value
    - include: 113_else-pop
  113_fallback:
    - match: (?xi){{113_attributeIdentifier}}(?=\s*=)
      scope: entity.other.attribute-name.html.jsx.jsx1
      set:
        - 113_meta
        - 113_optional-value
    - match: (?xi){{113_attributeIdentifier}}
      scope: entity.other.attribute-name.html.jsx.jsx1
      pop: 'True'
  113_meta:
    - meta_scope: meta.attribute-with-value.html.html5
    - include: 113_pop-now
  113_pop-now:
    - match: ''
      pop: 'True'
  113_ref:
    - match: ref(?=\s*=)
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.ref.html.jsx.jsx1
      set:
        - 113_meta
        - 113_optional-value
    - match: ref\b
      scope: meta.attribute.builtin.html.jsx.jsx1 entity.other.attribute-name.ref.html.jsx.jsx1
      pop: 'True'
  113_value:
    - include: Naomi/integration/syntaxes/src/facebook-jsx/component.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/element.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/fragment.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/facebook-jsx/literal/string/single-quoted.yml
    - include: 113_else-pop
  Naomi/integration/syntaxes/src/facebook-jsx/literal/string/single-quoted.yml:
    - match: \'
      scope: punctuation.definition.string.begin.html.jsx.jsx1
      set:
        - 114_string
  114_string:
    - meta_scope: string.quoted.single.html.jsx.jsx1
    - match: \'
      scope: punctuation.definition.string.end.html.jsx.jsx1
      pop: 'True'
  Naomi/integration/syntaxes/src/facebook-jsx/literal/string/double-quoted.yml:
    - match: \"
      scope: punctuation.definition.string.begin.html.html.jsx.jsx1
      set:
        - 115_string
  115_string:
    - meta_scope: string.quoted.double.html.html.jsx.jsx1
    - match: \"
      scope: punctuation.definition.string.end.html.html.jsx.jsx1
      pop: 'True'
  Naomi/integration/syntaxes/src/js/comment/eslint.yml:
    - match: \/\/(?=\s*eslint)
      scope: punctuation.definition.comment.begin.js.fjsx15
      set:
        - 116_line
    - match: \/\*(?=\s*eslint)
      scope: punctuation.definition.comment.begin.js.fjsx15
      set:
        - 116_block
  116_line:
    - include: 116_enable-disable
    - match: \s*$
      pop: 'True'
  116_block:
    - include: 116_enable-disable
    - match: \*/
      scope: punctuation.definition.comment.end.js.fjsx15
      pop: 'True'
  116_enable-disable:
    - match: (?i)eslint-(?>enable|disable)(?:-line)?
      scope: keyword.other.js.fjsx15
      push:
        - 116_rules-loop
  116_rules-loop:
    - match: (?=(?>$|\*\/))
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
    - match: |
        (?xi)
        (
          [$_[:alpha:]]
          [$_\-/[:alnum:]]*
        )
      scope: variable.other.eslint.rule.js.fjsx15
  Naomi/integration/syntaxes/src/js/literal/string/regex/index.yml:
    - match: /
      scope: punctuation.definition.string.begin.js.fjsx15
      set:
        - 117_regex-meta
        - 117_close-regex
        - 117_regex-content
  117_close-regex:
    - match: (/)([a-z]*)
      captures:
        1: punctuation.definition.string.end.js.fjsx15
        2: keyword.other.flag.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 117_regex-content
  117_pop-now:
    - match: ''
      pop: 'True'
  117_regex-content:
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/anchor.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/backref.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/backslash.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/capturing-group.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/character-class/index.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/lookahead.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/negative-lookahead.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/non-capturing-group.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/operator.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/quantifier.yml
    - include: 117_pop-now
  117_regex-meta:
    - meta_scope: string.regexp.js.fjsx15
    - include: 117_pop-now
  Naomi/integration/syntaxes/src/js/literal/string/regex/quantifier.yml:
    - match: '[*+]?\??'
      scope: keyword.operator.quantifier.regexp.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        \{
          (?> \d+,\d+
            | \d+,
            | \d+
          )
        }
      scope: keyword.operator.quantifier.regexp
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/operator.yml:
    - match: \|
      scope: keyword.operator.or.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/non-capturing-group.yml:
    - match: '\(\?:'
      scope: punctuation.definition.group.no-capture.begin.regexp.js.fjsx15
      set:
        - 120_meta
        - 120_close
        - 120_regex-content
  120_close:
    - match: \)
      scope: punctuation.definition.group.no-capture.end.regexp.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 120_regex-content
  120_meta:
    - meta_scope: meta.group.regexp.js.fjsx15
    - match: ''
      pop: 'True'
  120_regex-content:
    - include: 117_regex-content
  Naomi/integration/syntaxes/src/js/literal/string/regex/negative-lookahead.yml:
    - match: \(\?!
      scope: punctuation.definition.group.assertion.begin.regexp.js.fjsx15
      set:
        - 121_meta
        - 121_close
        - 121_regex-content
  121_close:
    - match: \)
      scope: punctuation.definition.group.assertion.end.regexp.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 121_regex-content
  121_meta:
    - meta_scope: meta.group.assertion.look-ahead.negative.regexp.js.fjsx15
    - match: ''
      pop: 'True'
  121_regex-content:
    - include: 117_regex-content
  Naomi/integration/syntaxes/src/js/literal/string/regex/lookahead.yml:
    - match: \(\?=
      scope: punctuation.definition.group.assertion.begin.regexp.js.fjsx15
      set:
        - 122_meta
        - 122_close
        - 122_regex-content
  122_close:
    - match: \)
      scope: punctuation.definition.group.assertion.end.regexp.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 122_regex-content
  122_meta:
    - meta_scope: meta.group.assertion.look-ahead.regexp.js.fjsx15
    - match: ''
      pop: 'True'
  122_regex-content:
    - include: 117_regex-content
  Naomi/integration/syntaxes/src/js/literal/string/regex/character-class/index.yml:
    - match: \.
      scope: constant.other.character-class.regexp.js.fjsx15
      pop: 'True'
    - match: ((\[)(\^)?)
      captures:
        1: constant.other.character-class.regexp.js.fjsx15
        2: punctuation.definition.character-class.begin.regexp.js.fjsx15
        3: keyword.operator.negation.regexp.js.fjsx15
      set:
        - 123_close
  123_close:
    - match: \]
      scope: constant.other.character-class.regexp.js.fjsx15 punctuation.definition.character-class.end.regexp.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 123_content
  123_content:
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/character-class/range.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/backslash.yml
    - match: .
      scope: constant.other.character-class.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/backslash.yml:
    - match: (?i)\\[wsd]|
      scope: constant.other.character-class.escape.backslash.regexp
      pop: 'True'
    - match: |
        (?x)
        \\
        (?> c[A-Z]
          | x[\da-fA-F]{2}
          | u[\da-fA-F]{4}
          | .
        )
      scope: constant.character.escape.backslash.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/character-class/range.yml:
    - match: (?xi){{125_possibleRange}}-{{125_possibleRange}}
      scope: constant.other.character-class.range.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/capturing-group.yml:
    - match: \((?!\?)
      scope: punctuation.definition.group.begin.regexp.js.fjsx15
      set:
        - 126_meta
        - 126_close
        - 126_regex-content
  126_close:
    - match: \)
      scope: punctuation.definition.group.end.regexp.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        - 126_regex-content
  126_meta:
    - meta_scope: meta.group.regexp.js.fjsx15
    - match: ''
      pop: 'True'
  126_regex-content:
    - include: 117_regex-content
  Naomi/integration/syntaxes/src/js/literal/string/regex/backref.yml:
    - match: \\[1-9][0-9]*
      scope: keyword.other.back-reference.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/literal/string/regex/anchor.yml:
    - match: (?>\\b|\^|\$)
      scope: keyword.control.anchor.regexp.js.fjsx15
      pop: 'True'
  Naomi/integration/syntaxes/src/js/function-expression.yml:
    - include: 59_function-properties
    - match: |
        (?x)
        (?=
          (?:async\s+)?
          function\b
        )
      set:
        - 129_declaration
        - 129_keyword
  129_body:
    - include: Naomi/integration/syntaxes/src/js/function/body.yml
  129_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/js/comment.no-pop.yml
  129_declaration:
    - meta_scope: meta.function.js.fjsx15
    - include: 129_comment-no-pop
    - match: (?=\{)
      set:
        - 129_body
    - match: (?=<)
      push:
        - 129_generic-arguments
    - match: (?=\()
      push:
        - 129_parameters
    - match: |
        (?xi)
        (?:(\*)\s*)?
        (?:({{129_commonIdentifier}}))?
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.function.js.fjsx15
    - include: 129_else-pop
  129_else-pop:
    - match: (?=\S)
      pop: 'True'
  129_keyword:
    - include: Naomi/integration/syntaxes/src/js/async.no-pop.yml
    - match: function\b
      scope: storage.type.function.js.fjsx15
      pop: 'True'
  129_generic-arguments:
    - include: Naomi/integration/syntaxes/src/facebook-flow/generic/arguments.yml
  129_parameters:
    - include: Naomi/integration/syntaxes/src/js/function/parameters.yml
  Naomi/integration/syntaxes/src/js/literal/index.yml:
    - include: Naomi/integration/syntaxes/src/js/literal/number.yml
    - include: Naomi/integration/syntaxes/src/js/literal/array.yml
    - include: Naomi/integration/syntaxes/src/js/literal/object/index.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/styled-component.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/template.yml
    - include: Naomi/integration/syntaxes/src/js/literal/string/regex/index.yml
  Naomi/integration/syntaxes/src/js/literal/string/styled-component.yml:
    - match: |
        (?x)
        (styled)
        (?:
          (.)(\w+)
          (.)(attrs)
        )?
        (?=\s*\()
      captures:
        1: support.function.styled-component.js.fjsx15
        2: punctuation.accessor.js.fjsxa15
        3: variable.other.component.js.fjsx15
        4: punctuation.accessor.js.fjsx15
        5: support.function.styled-component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_styled-component-begin
        - 131_meta-function-call
        - 131_arguments
    - match: |
        (?x)
        (
          [[:upper:]]
          [[:alnum:]]*
        )
        (.)
        (extend)
        (?=\s*`)
      captures:
        1: variable.other.component.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.styled-component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_styled-component-begin
    - match: |
        (?x)
        (styled)(.)
        (\w+)
        (?=\s*`)
      captures:
        1: support.function.styled-component.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: variable.other.component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_styled-component-begin
    - match: |
        (?x)
        ((?> createGlobalStyle
          | css
          | injectGlobal
        ))
        (?=\s*`)
      captures:
        1: support.function.styled-component.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: variable.other.component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_styled-component-begin
    - match: keyframes(?=\s*`)
      scope: support.function.styled-component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_styled-component-begin-keyframes
    - match: |
        (?x)
        (
          [[:upper:]]
          [[:alnum:]]*
        )
        (.)
        (withComponent)
        (?=\s*\()
      captures:
        1: variable.other.component.js.fjsx15
        2: punctuation.accessor.js.fjsx15
        3: support.function.styled-component.js.fjsx15
      set:
        - 131_meta-styled-component
        - 131_optional-extend
        - 131_meta-function-call
        - 131_arguments
  131_arguments:
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  131_close:
    - match: \`
      scope: punctuation.definition.styled-component.end.js.fjsx15
      pop: 'True'
  131_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
    - include: 32_no-pop
  131_keyframe-block-identifier:
    - include: 178_block-identifier
  131_meta-function-call:
    - meta_scope: meta.function-call.js.fjsx15
    - include: 131_pop-now
  131_meta-styled-component:
    - meta_scope: meta.styled-component.js.fjsx15
    - include: 131_pop-now
  131_optional-extend:
    - match: (\.)(extend)(?=`)
      captures:
        1: punctuation.accessor.js.fjsx15
        2: support.function.styled-component.js.fjsx15
      set:
        - 131_styled-component-begin
  131_pop-now:
    - match: ''
      pop: 'True'
  131_ruleset-block:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  131_ruleset-block-content:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block-content.yml
  131_shared-content:
    - match: (?=`)
      set:
        - 131_close
    - match: ;
      scope: punctuation.terminator.css.css3
  131_styled-component-begin:
    - match: (?=\()
      set:
        - 131_arguments
    - match: \`
      scope: punctuation.definition.styled-component.begin.js.fjsx15
      set:
        - 131_styled-component-content
  131_styled-component-begin-keyframes:
    - match: \`
      scope: punctuation.definition.styled-component.begin.js.fjsx15
      set:
        - 131_styled-component-content-keyframes
  131_styled-component-content:
    - clear_scopes: true
    - meta_content_scope: source.css
    - include: 131_comment-no-pop
    - include: 131_shared-content
    - match: (?=\{)
      push:
        - 131_ruleset-block
    - match: (?=\S)
      push:
        - 131_ruleset-block-content
  131_styled-component-content-keyframes:
    - clear_scopes: true
    - meta_content_scope: source.css
    - include: 131_comment-no-pop
    - include: 131_shared-content
    - match: (?=\S)
      push:
        - 131_ruleset-block
        - 131_keyframe-block-identifier
  Naomi/integration/syntaxes/src/css/ruleset/block-content.yml:
    - include: 132_comment-no-pop
    - match: (?=\})
      pop: 'True'
    - match: |
        (?xi)
        (?=
          {{132_customProperty}}
          \s*:
        )
      set:
        - 132_possible-set
        - 132_property
    - match: |
        (?x)
        # grid-template, grid-template-areas, grid-template-columns,
        # grid-template-rows
        grid-template(?:-(?>areas|columns|rows))?
        (?=\s*:)
      scope: support.type.property-name.css.css3
      set:
        - 132_meta-value
        - 132_optional-grid-template-value
        - 132_delimiter
    - match: |
        (?x)
        grid
        (?:-
          # grid-area
          (?> area
            # grid-auto-coolums, grid-auto-flow, grid-auto-rows
            | auto(?:-(?>columns|flow|rows))
            # grid-column, grid-column-end, grid-column-start
            | column(?:-(?>end|start))?
            # grid-gap
            | gap
            # grid-row, grid-row-end, grid-row-start
            | row(?:-(?>end|start))?
          )
        )?
        (?=\s*:)
      scope: support.type.property-name.css.css3
      set:
        - 132_meta-value
        - 132_optional-grid-value
        - 132_delimiter
    - match: |
        (?xi)
        (?=
          {{132_cssIdentifier}}
          \s*:
        )
      set:
        - 132_meta-value
        - 132_optional-value
        - 132_delimiter
        - 132_property
    - match: (?=\S)
      set:
        -   - include: Naomi/integration/syntaxes/src/css/statement.yml
            - include: Naomi/integration/syntaxes/src/css/ruleset/index.yml
  132_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  132_delimiter:
    - include: 132_comment-no-pop
    - match: ':'
      scope: punctuation.separator.key-value.css.css3
      pop: 'True'
  132_grid-line-name:
    - match: |
        (?xi)
        {{132_cssIdentifier}}
      scope: variable.other.grid-line.css.css3
      pop: 'True'
  132_meta-value:
    - meta_scope: meta.property-value.css.css3
    - include: 132_pop-now
  132_named-grid-line-declaration:
    - meta_scope: meta.named-grid-line.css.css3
    - include: 132_comment-no-pop
    - match: \]
      scope: punctuation.definition.bracket.end.css.css3
      pop: 'True'
    - match: (?=\S)
      push:
        - 132_grid-line-name
  132_optional-grid-value:
    - include: 132_comment-no-pop
    - match: (?=[`;()\]{}])
      pop: 'True'
    - match: (?=\S)
      push:
        -   - include: 132_start-end-ratio
            - include: 132_value-separator
            - match: span\b(?!-)
              scope: keyword.operator.word.css.css3
              pop: 'True'
            - include: 132_grid-line-name
            - include: Naomi/integration/syntaxes/src/css/value.yml
  132_optional-grid-template-value:
    - include: 132_comment-no-pop
    - match: (?=[`;()\]{}])
      pop: 'True'
    - match: \[
      scope: punctuation.definition.bracket.begin.css.css3
      push:
        - 132_named-grid-line-declaration
    - match: (?=\S)
      push:
        -   - include: 132_start-end-ratio
            - include: 132_value-separator
            - include: Naomi/integration/syntaxes/src/css/value.yml
  132_optional-value:
    - include: 132_comment-no-pop
    - match: (?=[`;()\[\]{}])
      pop: 'True'
    - match: (?=\S)
      push:
        -   - include: 132_value-separator
            - include: Naomi/integration/syntaxes/src/css/value.yml
  132_possible-set:
    - include: 132_comment-no-pop
    - match: ':'
      scope: punctuation.separator.key-value.css.css3
      set:
        - 132_meta-value
        - 132_set-or-optional-value
  132_pop-now:
    - match: ''
      pop: 'True'
  132_property:
    - include: 132_comment-no-pop
    - include: Naomi/integration/syntaxes/src/css/property.yml
  132_ruleset-block:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  132_start-end-ratio:
    - match: /
      scope: keyword.operator.arithmetic.ratio.css.css3
      pop: 'True'
  132_set-or-optional-value:
    - include: 132_comment-no-pop
    - match: (?=\{)
      set:
        - 132_ruleset-block
    - include: 132_optional-value
  132_value-separator:
    - match: \,
      scope: punctuation.separator.sequence.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/ruleset/block.yml:
    - match: \{
      scope: punctuation.section.property-list.begin.css.css3
      set:
        - 133_delimiter
  133_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  133_delimiter:
    - meta_scope: meta.property-list.css.css3
    - include: 133_comment-no-pop
    - match: \}
      scope: punctuation.section.property-list.end.css.css3
      pop: 'True'
    - match: ;
      scope: punctuation.terminator.css.css3
    - match: ''
      push:
        -   - include: Naomi/integration/syntaxes/src/css/ruleset/block-content.yml
            - match: ''
              pop: 'True'
  Naomi/integration/syntaxes/src/css/comment.no-pop.yml:
    - match: (?=/\*)
      push:
        -   - include: Naomi/integration/syntaxes/src/css/comment/index.yml
  Naomi/integration/syntaxes/src/css/comment/index.yml:
    - include: Naomi/integration/syntaxes/src/css/comment/block.yml
  Naomi/integration/syntaxes/src/css/comment/block.yml:
    - match: /\*
      scope: punctuation.definition.comment.begin.css.css3
      set:
        - 136_block
  136_block:
    - meta_scope: comment.block.css.css3
    - include: 136_email-no-pop
    - include: 136_link-no-pop
    - match: \*/
      scope: punctuation.definition.comment.end.css.css3
      pop: 'True'
  136_email-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/email.no-pop.yml
  136_link-no-pop:
    - include: Naomi/integration/syntaxes/src/shared/link.no-pop.yml
  Naomi/integration/syntaxes/src/css/property.yml:
    - include: 137_core
    - include: 137_custom
    - include: 137_prefixed
    - include: 137_other
  137_core:
    - match: (?xi){{137_coreProperties}}
      scope: support.type.property-name.css.css3
      pop: 'True'
  137_custom:
    - match: (?i){{137_customProperty}}
      captures:
        0: support.type.custom-property.css.css3
        1: punctuation.definition.custom-property.css.css3
        2: support.type.custom-property.name.css.css3
      pop: 'True'
  137_prefixed:
    - match: |
        (?xi)
        (-(?>moz|ms|o|webkit)-)
        ({{137_coreProperties}})
      captures:
        1: support.type.vendor-prefix.css.css3
        2: support.type.property-name.css.css3
      pop: 'True'
  137_other:
    - match: (?i){{137_cssIdentifier}}
      scope: variable.other.type.property-name.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/value.yml:
    - include: Naomi/integration/syntaxes/src/css/value-no-unquoted-string.yml
    - include: Naomi/integration/syntaxes/src/css/literal/string/unquoted.yml
  Naomi/integration/syntaxes/src/css/literal/string/unquoted.yml:
    - match: (?!--)[_[:alnum:]\-]+
      scope: string.unquoted.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/value-no-unquoted-string.yml:
    - match: '!important\b'
      scope: keyword.other.important.css.css3
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/css/literal/color.yml
    - include: Naomi/integration/syntaxes/src/css/literal/ratio.yml
    - include: Naomi/integration/syntaxes/src/css/literal/number.yml
    - include: Naomi/integration/syntaxes/src/css/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/css/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/css/function-call/index.yml
    - include: Naomi/integration/syntaxes/src/css/constant.yml
  Naomi/integration/syntaxes/src/css/constant.yml:
    - include: 141_color
    - include: 141_other
  141_color:
    - match: |
        (?xi)
        (?> aliceblue
          | antiquewhite
          | aqua
          | aquamarine
          | azure
          | beige
          | bisque
          | black
          | blanchedalmond
          | blue
          | blueviolet
          | brown
          | burlywood
          | cadetblue
          | chartreuse
          | chocolate
          | coral
          | cornflowerblue
          | cornsilk
          | crimson
          | cyan
          | dark
            (?> blue
              | cyan
              | goldenrod
              | gray
              | grey
              | green
              | khaki
              | magenta
              | olivegreen
              | orange
              | orchid
              | red
              | salmon
              | seagreen
              | slateblue
              | slategray
              | slategrey
              | turquoise
              | violet
            )
          | deeppink
          | deepskyblue
          | dimgray
          | dimgrey
          | dodgerblue
          | firebrick
          | floralwhite
          | forestgreen
          | fuchsia
          | gainsboro
          | ghostwhite
          | gold(?:enrod)?
          | gr[ae]y
          | green(?:yellow)?
          | honeydew
          | hotpink
          | indianred
          | indigo
          | ivory
          | khaki
          | lavender(?:blush)?
          | lawngreen
          | lemonchiffon
          | light
            (?> blue
              | coral
              | cyan
              | goldenrodyellow
              | gray
              | grey
              | green
              | pink
              | salmon
              | seagreen
              | skyblue
              | slategray
              | slategrey
              | steelblue
              | yellow
            )
          | lime(?:green)?
          | linen
          | magenta
          | maroon
          | medium
            (?> aquamarine
              | blue
              | orchid
              | purple
              | seagreen
              | slateblue
              | springgreen
              | turquoise
              | violetred
            )
          | midnightblue
          | mintcream
          | mistyrose
          | moccasin
          | navajowhite
          | navy
          | oldlace
          | olive(?:drab)?
          | orange(?:red)?
          | orchid
          | palegoldenrod
          | palegreen
          | paleturquoise
          | palevioletred
          | papayawhip
          | peachpuff
          | peru
          | pink
          | plum
          | powderblue
          | purple
          | rebeccapurple
          | red
          | rosybrown
          | royalblue
          | saddlebrown
          | salmon
          | sandybrown
          | seagreen
          | seashell
          | sienna
          | silver
          | skyblue
          | slateblue
          | slategr[ae]y
          | snow
          | springgreen
          | steelblue
          | tan
          | teal
          | thistle
          | tomato
          | turquoise
          | violet
          | wheat
          | white(?:smoke)?
          | yellow(?:green)?
        )\b
        (?!-)
      scope: support.constant.color.css.css3
      pop: 'True'
  141_other:
    - match: |
        (?x)
        (?> a4
          | absolute
          | alternate
          | all
          | at
          | auto-fill
          | auto-fit
          | auto
          | baseline
          | block
          | bold
          | border-box
          | bottom
          | button
          | center
          | checkbox
          | content-box
          | collapse
          | column(?:-reverse)?
          | contain
          | cover
          | dashed
          | disabled
          | dotted
          | ease
            (?:-(?>in|out))?
          | ellipsis
          | ellipse
          | false
          | fixed
          | flex-start
          | flex-end
          | flex
          | forwards
          | hidden
          | grid
          | infinite
          | inline-block
          | inline-flex
          | inline-grid
          | inline-table
          | inline
          | inherit
          | initial
          | italic
          | landscape
          | left
          | lining-nums
          | list-item
          | middle
          | no-repeat
          | none
          | normal
          | nowrap
          | number
          | only
          | pointer
          | print
          | projection
          | radio
          | relative
          | repeat
          | reset
          | right
          | row(?:-reverse)?
          | run-in
          | screen
          | search
          | small-caps
          | solid
          | space-arround
          | space-between
          | speech
          | sub
          | submit
          | system-ui
          | super
          | table-caption
          | table-cell
          | table-column(?:-group)?
          | table-footer-group
          | table-header-group
          | table-row(?:-group)?
          | table
          | text-bottom
          | text-top
          | top
          | transparent
          | true
          | tv
          | visible
          | uppercase
        )\b
        (?!-)
      scope: support.constant.property-value.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/function-call/index.yml:
    - include: 142_calc
    - include: 142_domain
    - include: 142_regexp
    - include: 142_url-and-url-prefix
    - include: 142_var
    - include: 142_other
    - include: 142_fallback
  142_arg-begin:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      pop: 'True'
  142_arg-close:
    - match: \)
      scope: punctuation.section.group.close.css.css3
      pop: 'True'
  142_arguments:
    - include: Naomi/integration/syntaxes/src/css/function-call/arguments.yml
  142_calc:
    - match: calc(?=\s*\()
      scope: support.function.css.css3
      set:
        - 142_meta
        - 142_calc-arg-close
        - 142_arg-begin
  142_calc-arg-close:
    - include: 142_comma-no-pop
    - include: 142_arg-close
    - match: (?=\S)
      push:
        - 142_calc-optional-tail
        - 142_calc-optional-head
  142_calc-close-group:
    - match: \)
      scope: punctuation.section.group.end.css.css3
      pop: 'True'
  142_calc-optional-head:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      push:
        - 142_meta-group
        - 142_calc-close-group
        - 142_calc-optional-tail
        - 142_calc-optional-head
    - include: Naomi/integration/syntaxes/src/css/value.yml
    - include: 142_else-pop
  142_calc-optional-tail:
    - match: '[+\-*/]'
      scope: keyword.operator.arithmetic.css.css3
      set:
        - 142_calc-optional-head
    - include: 142_else-pop
  142_comma-no-pop:
    - match: \,
      scope: punctuation.separator.comma.css.css3
  142_domain:
    - match: domain(?=\s*\()
      scope: support.function.domain.css.css3
      set:
        - 142_meta
        - 142_arg-close
        - 142_url-argument
        - 142_arg-begin
  142_else-pop:
    - match: (?=\S)
      pop: 'True'
  142_fallback:
    - match: |
        (?xi)
        (?=
          {{142_cssIdentifier}}
          \s*\(
        )
      set:
        - 142_meta
        - 142_arguments
        - 142_identifier
  142_identifier:
    - match: (?xi){{142_cssIdentifier}}
      scope: variable.function.css.css3
      pop: 'True'
  142_meta:
    - meta_scope: meta.function-call.css.css3 meta.group.css.css3
    - include: 142_pop-now
  142_meta-group:
    - meta_scope: meta.group.css.css3
    - include: 142_pop-now
  142_optional-var-value:
    - include: 137_custom
    - include: Naomi/integration/syntaxes/src/css/value.yml
    - include: 142_else-pop
  142_other:
    - match: |
        (?x)
        (?> attr
          | blur
          | cubic-bezier
          | format
          | gray
          | hsla?
          | hwb
          | image-set
          | linear-gradient
          | polygon
          | radial-gradient
          | repeating-(?>linear|radial)-gradient
          | repeat
          | rotate
          | rgba?
        )
        (?=\s*\()
      scope: support.function.css.css3
      set:
        - 142_meta
        - 142_arguments
  142_pop-now:
    - match: ''
      pop: 'True'
  142_quoted-string:
    - include: Naomi/integration/syntaxes/src/css/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/css/literal/string/single-quoted.yml
  142_regexp:
    - match: regexp(?=\s*\()
      scope: support.function.regexp.css.css3
      set:
        - 142_meta
        - 142_arg-close
        - 142_quoted-string
        - 142_arg-begin
  142_url-and-url-prefix:
    - match: url-prefix(?=\s*\()
      scope: support.function.url-prefix.css.css3
      set:
        - 142_meta
        - 142_arg-close
        - 142_url-argument
        - 142_arg-begin
    - match: url(?=\s*\()
      scope: support.function.url.css.css3
      set:
        - 142_meta
        - 142_arg-close
        - 142_url-argument
        - 142_arg-begin
  142_url-argument:
    - match: (?=\))
      pop: 'True'
    - include: 142_quoted-string
    - match: |
        (?x)
        (?> \\["'()\s]
          | [^"'()\s]
        )
      scope: string.unquoted.css.css3
  142_var:
    - match: var(?=\s*\()
      scope: support.function.regexp.css.css3
      set:
        - 142_meta
        - 142_var-arg-close
        - 142_arg-begin
  142_var-arg-close:
    - include: 142_comma-no-pop
    - include: 142_arg-close
    - match: (?=\S)
      push:
        - 142_optional-var-value
  Naomi/integration/syntaxes/src/css/literal/string/single-quoted.yml:
    - match: \'
      scope: punctuation.definition.string.begin.css.css3
      set:
        - 143_string
  143_string:
    - meta_scope: string.quoted.single.css.css3
    - match: \'
      scope: punctuation.definition.string.end.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/literal/string/double-quoted.yml:
    - match: \"
      scope: punctuation.definition.string.begin.css.css3
      set:
        - 144_string
  144_string:
    - meta_scope: string.quoted.double.css.css3
    - match: \"
      scope: punctuation.definition.string.end.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/function-call/arguments.yml:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      set:
        - 145_delimiter
  145_delimiter:
    - meta_scope: meta.group.css.css3
    - match: \)
      scope: punctuation.section.group.end.css.css3
      pop: 'True'
    - match: \,
      scope: punctuation.separtor.comma.css.css3
    - match: (?=\S)
      push:
        - 145_value
  145_value:
    - include: Naomi/integration/syntaxes/src/css/value.yml
  Naomi/integration/syntaxes/src/css/literal/number.yml:
    - include: 146_float
    - include: 146_integer
  146_float:
    - match: (?xi){{146_scientificNotation}}({{146_unit}})?
      captures:
        0: constant.numeric.float.scientific.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
    - match: (?xi){{146_literalFloat}}({{146_unit}})?
      captures:
        0: constant.numeric.float.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
  146_integer:
    - match: (?xi)-?0b[01]+({{146_unit}})?
      captures:
        0: constant.numeric.binary.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
    - match: (?xi)-?0[0-7]+({{146_unit}})?
      captures:
        0: constant.numeric.octal.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
    - match: (?xi)-?0[x][0-9a-f]+({{146_unit}})?
      captures:
        0: constant.numeric.hex.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
    - match: (?xi)(?:-?[1-9][0-9]*|0)({{146_unit}})?
      captures:
        0: constant.numeric.decimal.css.css3
        1: keyword.other.unit.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/literal/ratio.yml:
    - match: ([0-9]+)\s*(/)\s*([0-9])
      captures:
        0: constant.numeric.ratio.css.css3
        1: constant.numeric.decimal.css.css3
        2: keyword.operator.arithmetic.ratio.css.css3
        3: constant.numeric.decimal.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/literal/color.yml:
    - match: (?i)(\#)({{148_hex}}{3}|{{148_hex}}{6})\b
      captures:
        0: constant.other.color.rgb-value.css
        1: punctuation.definition.constant.css
      pop: 'True'
    - match: (?i)(\#)({{148_hex}}{4}|{{148_hex}}{8})\b
      captures:
        0: constant.other.color.rgba-value.css
        1: punctuation.definition.constant.css
      pop: 'True'
  Naomi/integration/syntaxes/src/css/ruleset/index.yml:
    - match: ''
      set:
        - 149_meta
        - 149_block
        - 149_selector-list
  149_block:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  149_meta:
    - meta_scope: meta.rule-set.css.css3
    - match: ''
      pop: 'True'
  149_selector-list:
    - include: Naomi/integration/syntaxes/src/css/ruleset/selector-list.yml
  Naomi/integration/syntaxes/src/css/ruleset/selector-list.yml:
    - match: ''
      set:
        - 150_meta-selector-list
        - 150_delimiter
        - 150_meta-selector
        - 150_selector-expression
  150_delimiter:
    - match: (?=[;{])
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.css.css3
      push:
        - 150_meta-selector
        - 150_selector-expression
  150_meta-selector:
    - meta_content_scope: meta.selector.css.css3
    - match: ''
      pop: 'True'
  150_meta-selector-list:
    - meta_content_scope: meta.selector-list.css.css3
    - match: ''
      pop: 'True'
  150_selector-expression:
    - include: Naomi/integration/syntaxes/src/css/selector-expression.yml
  Naomi/integration/syntaxes/src/css/selector-expression.yml:
    - match: ''
      set:
        - 151_optional-tail
        - 151_head
  151_head:
    - match: |
        (?xi)
        (?> ({{151_cssIdentifier}})
          | (\*)
        )
        \s*(\|)
      captures:
        0: meta.namespace-prefix.css.css3
        1: variable.other.namespace-prefix.css.css3
        2: keyword.other.namespace-wildcard.css.css3
        3: punctuation.separator.key-value.css.css3
    - include: Naomi/integration/syntaxes/src/css/selector/pseudo-element.yml
    - include: Naomi/integration/syntaxes/src/css/selector/pseudo-class.yml
    - include: Naomi/integration/syntaxes/src/css/selector/ampersand.yml
    - include: Naomi/integration/syntaxes/src/css/selector/attribute.yml
    - include: Naomi/integration/syntaxes/src/css/selector/custom.yml
    - include: Naomi/integration/syntaxes/src/css/selector/id.yml
    - include: Naomi/integration/syntaxes/src/css/selector/class.yml
    - include: Naomi/integration/syntaxes/src/css/selector/type.yml
    - include: Naomi/integration/syntaxes/src/css/selector/universal.yml
  151_optional-tail:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
    - match: (?=[,;(){}])
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/css/combinator.yml
    - match: (?=\[)
      push:
        -   - include: Naomi/integration/syntaxes/src/css/selector/attribute.yml
    - match: (?=:)
      push:
        -   - include: Naomi/integration/syntaxes/src/css/selector/pseudo-element.yml
            - include: Naomi/integration/syntaxes/src/css/selector/pseudo-class.yml
            - include: Naomi/integration/syntaxes/src/css/selector/custom.yml
    - match: (?=\S)
      push:
        - 151_head
  Naomi/integration/syntaxes/src/css/selector/custom.yml:
    - match: (?i){{152_customSelector}}
      captures:
        0: support.type.custom-selector.css.css3
        1: punctuation.definition.custom-selector.css.css3
        2: support.type.custom-selector.name.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/selector/pseudo-class.yml:
    - include: 153_expected-pseudo-classes
    - include: 153_matches
    - include: 153_not
    - include: 153_nth-child
    - include: 153_nth-of-type
    - include: 153_fallback
  153_expected-pseudo-classes:
    - match: (?xi)(:){{153_corePseudoClasses}}
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  153_fallback:
    - match: (?xi)(:){{153_cssIdentifier}}
      captures:
        0: variable.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  153_matches:
    - match: (\:)matches(?=\s*\()
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      set:
        - 153_selector-expression-as-arguments
  153_not:
    - match: (\:)not(?=\s*\()
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      set:
        - 153_selector-expression-as-arguments
    - match: (\:)not\b
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  153_nth-arguments:
    - include: Naomi/integration/syntaxes/src/css/selector/nth/arguments.yml
  153_nth-child:
    - match: (\:)nth(?:-last)?-child\b
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      set:
        - 153_nth-arguments
  153_nth-of-type:
    - match: (\:)nth(?:-last)?-of-type\b
      captures:
        0: entity.other.pseudo-class.css.cs3
        1: punctuation.definition.entity.css.css3
      set:
        - 153_nth-arguments
  153_selector-expression-as-arguments:
    - include: Naomi/integration/syntaxes/src/css/selector-expression-as-arguments.yml
  Naomi/integration/syntaxes/src/css/selector-expression-as-arguments.yml:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      set:
        - 154_close
  154_close:
    - meta_scope: meta.group.css.css3
    - match: \)
      scope: punctuation.section.group.end.css.css3
      pop: 'True'
    - match: (?=\S)
      push:
        - 154_expression
  154_expression:
    - include: Naomi/integration/syntaxes/src/css/selector-expression.yml
  Naomi/integration/syntaxes/src/css/selector/nth/arguments.yml:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      set:
        - 155_close
  155_close:
    - meta_scope: meta.group.css.css3
    - match: \)
      scope: punctuation.section.group.end.css.css3
      pop: 'True'
    - match: (?=\S)
      push:
        - 155_expression
  155_expression:
    - include: Naomi/integration/syntaxes/src/css/selector/nth/expression.yml
  Naomi/integration/syntaxes/src/css/selector/nth/expression.yml:
    - include: 156_operator
    - match: (?=\S)
      set:
        - 156_optional-tail
        - 156_head
  156_head:
    - match: (?>even|odd)\b
      scope: keyword.other.pseudo-class.css.css3
      pop: 'True'
    - match: -?[1-9][0-9]*|0
      scope: constant.numeric.decimal.css.css3
      pop: 'True'
    - match: n\b
      scope: keyword.other.unit.css.css3
      pop: 'True'
  156_operator:
    - match: '[+-]'
      scope: keyword.operator.arithmetic.css.css3
      set:
        - Naomi/integration/syntaxes/src/css/selector/nth/expression.yml
    - match: of\b
      scope: keyword.operator.word.of.css.css3
      set:
        - 156_selector-expression
  156_optional-tail:
    - include: 156_operator
    - match: (?=\S)
      pop: 'True'
  156_selector-expression:
    - include: Naomi/integration/syntaxes/src/css/selector-expression.yml
  Naomi/integration/syntaxes/src/css/selector/pseudo-element.yml:
    - include: 157_css2
    - include: 157_other
    - include: 157_fallback
  157_css2:
    - match: (?xi)(::?)(?>after|before|first-(?>letter|line))\b
      captures:
        0: entity.other.pseudo-element.class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  157_fallback:
    - match: (?xi)(::){{157_cssIdentifier}}
      captures:
        0: variable.other.pseudo-element.class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  157_other:
    - match: (::)cue(?=\s*\()
      captures:
        0: entity.other.pseudo-element.class.css.cs3
        1: punctuation.definition.entity.css.css3
      set:
        - 157_selector-expression-as-arguments
    - match: (?xi)(::)(?>backdrop|cue|selection)\b
      captures:
        0: entity.other.pseudo-element.class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  157_selector-expression-as-arguments:
    - include: Naomi/integration/syntaxes/src/css/selector-expression-as-arguments.yml
  Naomi/integration/syntaxes/src/css/selector/attribute.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.css.css3
      set:
        - 158_meta
        - 158_close
        - 158_optional-operator
        - 158_attribute
  158_attribute:
    - include: Naomi/integration/syntaxes/src/html/attribute/builtin.yml
    - include: Naomi/integration/syntaxes/src/html/attribute/data.yml
    - match: |
        (?xi)
        (?> [_[:alpha:]\-]
          | \\\S
        )+
      scope: entity.other.attribute-name.css.css3
      pop: 'True'
  158_close:
    - match: \]
      scope: punctuation.section.brackets.end.css.css3
      pop: 'True'
    - match: (?=\S)
      push:
        - 158_value
  158_meta:
    - meta_scope: meta.attribute-selector.css.css3
    - match: ''
      pop: 'True'
  158_optional-operator:
    - match: '[~|^$*]?='
      scope: keyword.operator.attribute-selector.css.css3
      set:
        - 158_value
    - match: (?=\S)
      pop: 'True'
  158_value:
    - include: Naomi/integration/syntaxes/src/css/value.yml
  Naomi/integration/syntaxes/src/html/attribute/data.yml:
    - match: (?i)data-[_:[:alnum:]\-.]*
      scope: meta.attribute.data.html.html5 entity.other.attribute-name.html.html5
      pop: 'True'
  Naomi/integration/syntaxes/src/html/attribute/builtin.yml:
    - match: id\b
      scope: meta.attribute.builtin.html.html5 entity.other.attribute-name.id.html.html5
      pop: 'True'
    - match: |
        (?xi)
        (?> a
            # accept, accept-charset, accessKey
            (?> cce(?>pt(?:-charset)?|sskey)
              # action
              | ction
              # align, alt
              | l(?>ign|t)
              # async
              | sync
              # autocomplete, autofocus, autoplay, autosave
              | uto(?>complete|focus|play|save)
            )
          | buffered
          | c
            # challenge, charset
            (?> ha(?>llenge|rset)
              # checked
              | hecked
              # cite
              | ite
              # class
              | lass
              | o
                # code, codebase
                (?> de(?:base)?
                  # cols, colspan
                  | ls(?:pan)?
                  # content. contenteditable, contextmenu, controls
                  | nt(?>e(?>nt(?:editable)?|xtmenu)|rols)
                  # cords
                  | ords
                )
            )
          | d
            # data, datetime
            (?> at(?>a|etime)
              # default, defer
              | ef(?>ault|er)
              # dir, dirname
              | ir(?:name)?
              # disabled
              | isabled
              # download
              | ownload
              # draggable, dropzone
              | r(?>aggable|opzone)
            )
          | enctype
          # form, formaction
          | for(?:m(?:action)?)?
          | h
            # headers
            (?> eaders
              # height
              | eight
              # hidden
              | idden
              # high
              | igh
              # href
              | ref(?:lang)?
              # http-equiv
              | ttp-equiv
            )
          | i
            # icon
            (?> con
              # ismap
              | smap
              # itemprop
              | temprop
            )
          # keytype, kind
          | k(?>eytype|ind)
          | l
            # label
            (?> abel
              # lang, language
              | ang(?:uage)?
              # list
              | ist
              # loop
              | oop
              # low
              | ow
            )
          | m
            # manifest
            (?> anifest
              # max
              | ax(?:length)?
              # media
              | edia
              # method
              | ethod
              # min
              | in
              #  multiple
              | ultiple
              # muted
              | uted
            )
          # name, novalidate
          | n(?>ame|ovalidate)
          # open, optimum
          | op(?>en|timum)
          | p
            # pattern
            (?> attern
              # ping
              | ing
              # placeholder
              | laceholder
              # poster
              | oster
              # preload
              | reload
            )
          | r
            # radiogroup
            (?> adiogroup
              # readonly, rel, required, reversed
              | e(?>adonly|l|quired|versed)
              # rows, rowspan
              | ows(?:pan)?
            )
          | s
            # sandbox
            (?> andbox
              # scope, scoped
              | coped?
              # seamless
              | eamless
              # selected
              | elected
              # shape
              | hape
              # size, sizes
              | izes?
              # span
              | pan
              # spellcheck
              | pellcheck
              # src, srcdoc, srclang, srcset
              | rc(?>doc|lang|set)?
              # start, step, style, summary
              | t(?>art|ep|yle)
              # summary
              | ummary
            )
          | t
            # tabindex, target
            (?> a(?>bindex|rget)
              # title
              | itle
              # type
              | ype
            )
          | usemap
          | value
          # width, wrap
          | w(?>idth|rap)
        )\b(?!-)
      scope: meta.attribute.builtin.html.html5 entity.other.attribute-name.html.html5
      pop: 'True'
  Naomi/integration/syntaxes/src/css/combinator.yml:
    - match: \+
      scope: punctuation.separator.combinator.sibling.direct.css.css3
      set:
        - 161_optional-selector-expression
    - match: None
      scope: punctuation.separator.combinator.sibling.css.css3
      set:
        - 161_optional-selector-expression
    - match: \>
      scope: punctuation.separator.combinator.child.css.css3
      set:
        - 161_optional-selector-expression
  161_optional-selector-expression:
    - match: (?=[,{])
      pop: 'True'
    - match: (?=\S)
      set:
        - 161_selector-expression
  161_selector-expression:
    - include: Naomi/integration/syntaxes/src/css/selector-expression.yml
  Naomi/integration/syntaxes/src/css/selector/universal.yml:
    - match: \*
      scope: entity.name.tag.wildcard.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/selector/type.yml:
    - match: (?xi){{163_tags}}\b
      scope: entity.name.tag.css.cs3
      pop: 'True'
    - match: (?xi){{163_cssIdentifier}}\b
      scope: variable.other.tag.css.cs3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/selector/class.yml:
    - match: (?xi)(\.)({{164_cssIdentifier}})
      captures:
        0: entity.other.attribute-name.class.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/selector/id.yml:
    - match: (?xi)(\#)({{165_cssIdentifier}})
      captures:
        0: entity.other.attribute-name.id.css.cs3
        1: punctuation.definition.entity.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/selector/ampersand.yml:
    - match: \&
      scope: entity.name.tag.wildcard.parent.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/statement.yml:
    - include: 167_apply
    - include: 167_empty-statement
    - include: 167_charset
    - include: 167_conditional-group-rules
    - include: 167_counter-style
    - include: 167_custom-media
    - include: 167_custom-selector
    - include: 167_font-face
    - include: 167_keyframes
    - include: 167_namespace
    - include: 167_nest
    - include: 167_import
    - include: 167_page
    - include: 167_viewport
  167_apply:
    - match: (@)apply\b
      captures:
        0: keyword.control.at-rule.apply.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-apply
        - 167_custom-property
  167_charset:
    - match: (@)charset\b
      captures:
        0: keyword.control.at-rule.charset.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-charset
        - 167_double-quoted-string
  167_conditional-group-body:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  167_conditional-group-rules:
    - match: (@)document\b
      captures:
        0: keyword.control.at-rule.document.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-document
        - 167_conditional-group-body
        - 167_url-list
    - match: (@)media\b
      captures:
        0: keyword.control.at-rule.media.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-media
        - 167_conditional-group-body
        - 167_optional-media-query-list
    - match: (@)supports\b
      captures:
        0: keyword.control.at-rule.supports.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-supports
        - 167_conditional-group-body
        - 167_feature-query-list
  167_counter-style:
    - match: (@)counter-style\b
      captures:
        0: keyword.control.at-rule.counter-style.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-counter-style
        - 167_ruleset-block
        - 167_counter-style-name
  167_counter-style-name:
    - match: |
        (?xi)
        {{167_cssIdentifier}}
      scope: entity.other.counter-style.css.css3
      pop: 'True'
  167_custom-media:
    - match: (@)custom-media\b
      captures:
        0: keyword.control.at-rule.media.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-custom-media
        - 167_optional-media-query-list
        - 167_custom-media-identifier
  167_custom-media-identifier:
    - include: Naomi/integration/syntaxes/src/css/custom-media-identifier.yml
  167_custom-selector:
    - match: (@)custom-selector\b
      captures:
        0: keyword.control.at-rule.media.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-custom-selector
        - 167_selector-list
        - 167_custom-selector-identifier
  167_custom-selector-identifier:
    - include: Naomi/integration/syntaxes/src/css/selector/custom.yml
  167_custom-property:
    - include: 137_custom
  167_double-quoted-string:
    - include: Naomi/integration/syntaxes/src/css/literal/string/double-quoted.yml
  167_empty-statement:
    - match: ;
      scope: punctuation.terminator.css.css3
      pop: 'True'
  167_feature-query-list:
    - include: Naomi/integration/syntaxes/src/css/feature-query-list.yml
  167_font-face:
    - match: (@)font-face\b
      captures:
        0: keyword.control.at-rule.font-face.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-font-face
        - 167_ruleset-block
  167_import:
    - match: (@)import-normalize\b
      captures:
        0: keyword.control.at-rule.import.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-import
    - match: (@)import\b
      captures:
        0: keyword.control.at-rule.import.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-import
        - 167_optional-media-query-list
        - 167_string-or-url
  167_keyframe-block-list:
    - include: Naomi/integration/syntaxes/src/css/keyframe-block-list.yml
  167_keyframe-name:
    - match: |
        (?xi)
        {{167_cssIdentifier}}
      scope: entity.other.animation-name.css.css3
      pop: 'True'
  167_keyframes:
    - match: |
        (?x)
        (@)
        (?:-
          (?> moz
            | ms
            | o
            | webkit
          )
        -)?keyframes\b
      captures:
        0: keyword.control.at-rule.keyframes.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-keyframes
        - 167_keyframe-block-list
        - 167_keyframe-name
  167_meta-apply:
    - meta_scope: meta.at-rule.apply.css.css3
    - include: 167_pop-now
  167_meta-charset:
    - meta_scope: meta.at-rule.charset.css.css3
    - include: 167_pop-now
  167_meta-counter-style:
    - meta_scope: meta.at-rule.counter-style.css.css3
    - include: 167_pop-now
  167_meta-custom-media:
    - meta_scope: meta.at-rule.custom-media.css.css3
    - include: 167_pop-now
  167_meta-custom-selector:
    - meta_scope: meta.at-rule.custom-selector.css.css3
    - include: 167_pop-now
  167_meta-document:
    - meta_scope: meta.at-rule.document.css.css3
    - include: 167_pop-now
  167_meta-font-face:
    - meta_scope: meta.at-rule.font-face.css.css3
    - include: 167_pop-now
  167_meta-import:
    - meta_scope: meta.at-rule.import.css.css3
    - include: 167_pop-now
  167_meta-keyframes:
    - meta_scope: meta.at-rule.keyframes.css.css3
    - include: 167_pop-now
  167_meta-media:
    - meta_scope: meta.at-rule.media.css.css3
    - include: 167_pop-now
  167_meta-namespace:
    - meta_scope: meta.at-rule.namespace.css.css3
    - include: 167_pop-now
  167_meta-nest:
    - meta_scope: meta.at-rule.nest.css.css3
    - include: 167_pop-now
  167_meta-page:
    - meta_scope: meta.at-rule.page.css.css3
    - include: 167_pop-now
  167_meta-supports:
    - meta_scope: meta.at-rule.supports.css.css3
    - include: 167_pop-now
  167_meta-viewport:
    - meta_scope: meta.at-rule.viewport.css.css3
    - include: 167_pop-now
  167_namespace:
    - match: (@)namespace\b
      captures:
        0: keyword.control.at-rule.namespace.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-namespace
        - 167_string-or-url
        - 167_optional-namespace-prefix
  167_nest:
    - match: (@)nest\b
      captures:
        0: keyword.control.at-rule.nest.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-nest
        - 167_ruleset-block
        - 167_selector-list
  167_optional-media-query-list:
    - include: Naomi/integration/syntaxes/src/css/optional-media-query-list.yml
  167_optional-namespace-prefix:
    - match: |
        (?xi)
        {{167_cssIdentifier}}\b
        (?!\s*\()
      scope: entity.name.namespace.css.css3
      pop: 'True'
    - match: (?=\S)
      pop: 'True'
  167_optional-page-selector:
    - include: Naomi/integration/syntaxes/src/css/optional-page-selector-list.yml
  167_page:
    - match: (@)page\b
      captures:
        0: keyword.control.at-rule.page.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-page
        - 167_page-block
        - 167_optional-page-selector
  167_page-block:
    - include: Naomi/integration/syntaxes/src/css/page/block.yml
  167_pop-now:
    - match: ''
      pop: 'True'
  167_ruleset-block:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  167_selector-list:
    - include: Naomi/integration/syntaxes/src/css/ruleset/selector-list.yml
  167_string-or-url:
    - include: Naomi/integration/syntaxes/src/css/literal/string/double-quoted.yml
    - include: Naomi/integration/syntaxes/src/css/literal/string/single-quoted.yml
    - include: Naomi/integration/syntaxes/src/css/function-call/index.yml
  167_viewport:
    - match: (@)viewport\b
      captures:
        0: keyword.control.at-rule.viewport.css.css3
        1: punctuation.definition.keyword.css.css3
      set:
        - 167_meta-viewport
        - 167_ruleset-block
  167_url-list:
    - include: Naomi/integration/syntaxes/src/css/url-list.yml
  Naomi/integration/syntaxes/src/css/url-list.yml:
    - match: ''
      set:
        - 168_meta-url-list
        - 168_delimiter
        - 168_url
  168_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  168_delimiter:
    - include: 168_comment-no-pop
    - match: (?=\{)
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.css.css3
      push:
        - 168_optional-url
  168_meta-url-list:
    - meta_content_scope: meta.document.url-list.css.css3
    - match: ''
      pop: 'True'
  168_optional-url:
    - include: 168_comment-no-pop
    - match: (?=[,;()\[\]{}])
      pop: 'True'
    - include: 168_url
  168_url:
    - include: Naomi/integration/syntaxes/src/css/function-call/index.yml
  Naomi/integration/syntaxes/src/css/page/block.yml:
    - match: \{
      scope: punctuation.section.property-list.begin.css.css3
      set:
        - 169_delimiter
  169_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  169_delimiter:
    - meta_scope: meta.at-rule.page.body.css.css3 meta.property-list.css.css3
    - include: 169_comment-no-pop
    - match: \}
      scope: punctuation.section.property-list.end.css.css3
      pop: 'True'
    - match: ;
      scope: punctuation.terminator.css.css3
    - match: ''
      push:
        -   - include: Naomi/integration/syntaxes/src/css/ruleset/block-content.yml
            - match: ''
              pop: 'True'
  Naomi/integration/syntaxes/src/css/optional-page-selector-list.yml:
    - include: 170_expression-escape
    - match: (?=\S)
      set:
        -   - include: Naomi/integration/syntaxes/src/css/page-selector-list.yml
  170_expression-escape:
    - match: (?=[,;)\[\]{}])
      pop: 'True'
  Naomi/integration/syntaxes/src/css/page-selector-list.yml:
    - match: ''
      set:
        - 171_meta-selector-list
        - 171_delimiter
        - 171_meta-selector
        - 171_selector
  171_delimiter:
    - match: \,
      scope: punctuation.separator.comma.css.css3
      push:
        - 171_meta-selector
        - 171_optional-selector
    - include: 171_else-pop
  171_else-pop:
    - match: (?=\S)
      pop: 'True'
  171_meta-selector:
    - meta_content_scope: meta.page-selector.css.css3
    - include: 171_pop-now
  171_meta-selector-list:
    - meta_content_scope: meta.page-selector-list.css.css3
    - include: 171_pop-now
  171_optional-selector:
    - match: (?=[,;()\[\]{}])
      pop: 'True'
    - include: 171_selector
  171_pop-now:
    - match: ''
      pop: 'True'
  171_selector:
    - match: |
        (?xi)
        {{171_cssIdentifier}}\b
      scope: entity.name.page.css.css3
    - match: (:)((?>blank|first|left|recto|right|verso))
      captures:
        1: punctuation.definition.entity.css.css3
        2: entity.other.pseudo-class.css.css3
      pop: 'True'
    - include: 171_else-pop
  Naomi/integration/syntaxes/src/css/optional-media-query-list.yml:
    - include: 172_expression-escape
    - match: (?=\S)
      set:
        -   - include: Naomi/integration/syntaxes/src/css/media-query-list.yml
  172_expression-escape:
    - match: (?=[,;:)\[\]{}])
      pop: 'True'
  Naomi/integration/syntaxes/src/css/media-query-list.yml:
    - match: ''
      set:
        - 173_meta-query-list
        - 173_delimiter
        - 173_meta-query
        - 173_query
  173_delimiter:
    - match: (?=[;{])
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.css.css3
      push:
        - 173_meta-query
        - 173_optional-query
  173_meta-query:
    - meta_content_scope: meta.media-query.css.css3
    - include: 173_pop-now
  173_meta-query-list:
    - meta_content_scope: meta.media-query-list.css.css3
    - include: 173_pop-now
  173_optional-query:
    - include: Naomi/integration/syntaxes/src/css/optional-media-query.yml
  173_pop-now:
    - match: ''
      pop: 'True'
  173_query:
    - include: Naomi/integration/syntaxes/src/css/media-query.yml
  Naomi/integration/syntaxes/src/css/media-query.yml:
    - include: 174_comment-no-pop
    - include: 174_logical-operator
    - match: ''
      set:
        - 174_optional-tail
        - 174_head
  174_close-group:
    - meta_scope: meta.group.css.css3
    - match: \)
      scope: punctuation.section.group.end.js.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        -   - include: 174_logical-operator
            - include: 174_feature-expression
  174_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  174_else-pop:
    - match: (?=\S)
      pop: 'True'
  174_feature-expression:
    - include: Naomi/integration/syntaxes/src/css/media-query-feature-expression.yml
  174_head:
    - include: 174_comment-no-pop
    - include: 174_type
    - include: 174_open-group
  174_logical-operator:
    - match: (?>and|not|or|only)\b
      scope: keyword.operator.word.logical.media-query.css.css3
      set:
        - 174_optional-media-query
  174_open-group:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      set:
        - 174_close-group
  174_optional-media-query:
    - include: Naomi/integration/syntaxes/src/css/optional-media-query.yml
  174_optional-tail:
    - include: 174_comment-no-pop
    - include: 174_logical-operator
    - include: 174_else-pop
  174_type:
    - match: |
        (?x)
        (?> all
          | aural
          | braille
          | embossed
          | handheld
          | print
          | projection
          | screen
          | speech
          | tty
          | tv
        )\b
      scope: support.constant.media.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/optional-media-query.yml:
    - include: 175_expression-escape
    - match: (?=\S)
      set:
        -   - include: Naomi/integration/syntaxes/src/css/media-query.yml
  175_expression-escape:
    - match: (?=[,;:)\]{}])
      pop: 'True'
  Naomi/integration/syntaxes/src/css/media-query-feature-expression.yml:
    - include: 176_comment-no-pop
    - match: ''
      set:
        - 176_optional-tail
        - 176_head
  176_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  176_custom-property:
    - include: Naomi/integration/syntaxes/src/css/custom-media-identifier.yml
  176_else-pop:
    - match: (?=\S)
      pop: 'True'
  176_head:
    - include: 176_comment-no-pop
    - include: 176_custom-property
    - match: |
        (?x)
        ((?> any-(?>pointer|hover)
          | aspect-ratio
          | color(?:-(?>gamut|index))?
          | device-(?>aspect-ratio|height|width)
          | display-mode
          | grid
          | height
          | hover
          | inverted-colors
          | light-level
          | max-(?>height|width)
          | min-(?>height|width)
          | orientation
          | overflow-(?>block|inline)
          | pointer
          | resolution
          | scan
          | scripting
          | update
          | width
        ))
        (?:\s*(:))?
      captures:
        1: support.type.media-feature.css.css3
        2: punctuation.separator.key-value.css.css3
      pop: 'True'
    - include: 176_value
  176_optional-tail:
    - include: 176_comment-no-pop
    - match: |
        (?x)
        (?> <>
          | <=?
          | >=?
        )
      scope: keyword.operator.comparison.css.css3
      set:
        - 176_head
    - include: 176_else-pop
  176_value:
    - include: Naomi/integration/syntaxes/src/css/value.yml
  Naomi/integration/syntaxes/src/css/custom-media-identifier.yml:
    - match: (?i){{177_customMedia}}
      captures:
        0: support.type.custom-media.css.css3
        1: punctuation.definition.custom-media.css.css3
        2: support.type.custom-media.name.css.css3
      pop: 'True'
  Naomi/integration/syntaxes/src/css/keyframe-block-list.yml:
    - match: \{
      scope: punctuation.section.block.begin.css.css3
      set:
        - 178_meta-block-list
        - 178_block-list-end
  178_block-identifier:
    - match: (?>from|to)
      scope: keyword.keyframe-selector.css.css3
      pop: 'True'
    - include: Naomi/integration/syntaxes/src/css/literal/number.yml
  178_block-list-end:
    - match: \}
      scope: punctuation.section.block.end.css.css3
      pop: 'True'
    - match: (?=\S)
      push:
        - 178_ruleset-block
        - 178_block-identifier
  178_meta-block-list:
    - meta_scope: meta.block-list.css.css3
    - include: 178_pop-now
  178_pop-now:
    - match: ''
      pop: 'True'
  178_ruleset-block:
    - include: Naomi/integration/syntaxes/src/css/ruleset/block.yml
  Naomi/integration/syntaxes/src/css/feature-query-list.yml:
    - match: ''
      set:
        - 179_meta-query-list
        - 179_delimiter
        - 179_meta-query
        - 179_query
  179_delimiter:
    - match: \,
      scope: punctuation.separator.comma.css.css3
      push:
        - 179_meta-query
        - 179_optional-query
    - include: 179_else-pop
  179_else-pop:
    - match: (?=\S)
      pop: 'True'
  179_meta-query:
    - meta_content_scope: meta.feature-query.css.css3
    - include: 179_pop-now
  179_meta-query-list:
    - meta_content_scope: meta.feature-query-list.css.css3
    - include: 179_pop-now
  179_optional-query:
    - match: (?=[,;()\[\]{}])
      pop: 'True'
    - include: 179_query
  179_pop-now:
    - match: ''
      pop: 'True'
  179_query:
    - include: Naomi/integration/syntaxes/src/css/optional-feature-query.yml
  Naomi/integration/syntaxes/src/css/optional-feature-query.yml:
    - include: 180_expression-escape
    - match: (?=\S)
      set:
        -   - include: Naomi/integration/syntaxes/src/css/feature-query.yml
  180_expression-escape:
    - match: (?=[,;:)\]}])
      pop: 'True'
  Naomi/integration/syntaxes/src/css/feature-query.yml:
    - include: 181_comment-no-pop
    - include: 181_logical-operator
    - match: ''
      set:
        - 181_optional-tail
        - 181_head
  181_close-group:
    - meta_scope: meta.group.css.css3
    - match: \)
      scope: punctuation.section.group.end.j.fjsx15
      pop: 'True'
    - match: (?=\S)
      push:
        -   - include: 181_logical-operator
            - match: ''
              set:
                - 181_meta-value
                - 181_optional-value
                - 181_delimiter
                - 181_property
  181_comment-no-pop:
    - include: Naomi/integration/syntaxes/src/css/comment.no-pop.yml
  181_delimiter:
    - include: 132_delimiter
  181_else-pop:
    - match: (?=\S)
      pop: 'True'
  181_head:
    - include: 181_comment-no-pop
    - include: 181_open-group
  181_logical-operator:
    - match: (?>and|not|or|only)\b
      scope: keyword.operator.word.logical.feature-query.css.css3
      set:
        - 181_optional-feature-query
  181_meta-value:
    - include: 132_meta-value
  181_open-group:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      set:
        - 181_close-group
  181_optional-feature-query:
    - include: Naomi/integration/syntaxes/src/css/optional-feature-query.yml
  181_optional-tail:
    - include: 181_logical-operator
    - include: 181_else-pop
  181_optional-value:
    - include: 132_optional-value
  181_property:
    - include: 132_property
  Naomi/integration/syntaxes/src/js/literal/array.yml:
    - match: \[
      scope: punctuation.section.brackets.begin.js.fjsx15
      set:
        - 182_delimiters
        - 182_optional-expression
  182_delimiters:
    - meta_scope: meta.sequence.js.fjsx15
    - match: \]
      scope: punctuation.section.brackets.end.js.fjsx15
      pop: 'True'
    - match: \,
      scope: punctuation.separator.comma.js.fjsx15
      push:
        - 182_optional-expression
  182_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/web.yml:
    - match: (document)\s*(\.)
      captures:
        1: support.type.object.dom.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 183_document-property-or-function
    - match: (window)\s*(\.)
      captures:
        1: support.type.object.dom.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 183_window-property-or-function
    - match: (?>document|window)\b
      scope: support.type.object.dom.js.fjsx15
      pop: 'True'
  183_arguments:
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  183_document-property-or-function:
    - match: (?x){{183_documentFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 183_function-call-meta-scope
        - 183_arguments
    - match: (?x){{183_documentFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (?> activeElement
          | body
          | characterSet
          | childElementCount
          | children
          | compatMode
          | currentScript
          | defaultView
          | designMode
          | dir
          | doctype
          | documentElement
          | documentURI
          | documentURIObject
          | domain
          | embeds
          | firstElementChild
          | forms
          | fullscreenElement
          | fullscreenEnabled
          | head
          | hidden
          | images
          | implementation
          | last
            (?> ElementChild
              | Modified
              | StyleSheetSet
            )
          | links
          | location
          | on
            (?> abort
              | animationcancel
              | animationend
              | blur
              | change
              | click
              | close
              | contextmenu
              | dblclick
              | error
              | focus
              | fullscreenchange
              | fullscreenerror
              | gotpointercapture
              | input
              | keydown
              | keypress
              | keyup
              | load
              | loadend
              | loadstart
              | lostpointercapture
              | mousedown
              | mousemove
              | mouseout
              | mouseover
              | mouseup
              | offline
              | online
              | pointercancel
              | pointerdown
              | pointerenter
              | pointerleave
              | pointermove
              | pointerout
              | pointerover
              | pointerup
              | reset
              | resize
              | scroll
              | select
              | submit
              | transitioncancel
              | transitionend
              | visibilitychange
              | wheel
            )
          | plugins
          | pointerLockElement
          | popupNode
          | preferredStyleSheetSet
          | readyState
          | referrer
          | scripts
          | scrollingElement
          | selectedStyleSheetSet
          | styleSheets
          | styleSheetSets
          | title
          | tooltipNode
          | URL
          | visibilityState
        )\b
      scope: support.variable.js.fjsx15
      pop: 'True'
    - include: 183_other-property-or-function
  183_function-call-meta-scope:
    - meta_scope: meta.function-call.js.fjsx15
    - include: 183_pop-now
  183_other-property-or-function:
    - include: 60_other-property-or-function
  183_pop-now:
    - match: ''
      pop: 'True'
  183_window-property-or-function:
    - match: (?x){{183_windowFunctions}}(?=\s*\()
      scope: support.function.js.fjsx15
      set:
        - 183_function-call-meta-scope
        - 183_arguments
    - match: (?x){{183_windowFunctions}}
      scope: support.function.js.fjsx15
      pop: 'True'
    - match: |
        (?x)
        (?> applicationCache
          | caches
          | closed
          | console
          | controllers
          | crypto
          | devicePixelRatio
          | document
          | frameElement
          | frames
          | fullScreen
          | history
          | indexedDB
          # innerHeight, innerWidth
          | inner(?>Height|Width)
          | isSecureContext
          | length
          | localStorage
          # location, locationbar
          | location(?:bar)?
          | menubar
          | messageManager
          | name
          | navigator
          | onabort
          | onafterprint
          | onanimation
            # onanimationcancel
            (?> cancel
              # onanimationend
              | end
              # onanimationiteration
              | iteration
            )
          | onappinstalled
          | onauxclick
          | onbefore
            # onbeforeinstallprompt
            (?> installprompt
              # onbeforeprint
              | print
              # onbeforeunload
              | unload
            )
          | onblur
          | onchange
          | onclick
          | onclose
          | oncontextmenu
          | ondblclick
          | ondevice
            # ondevicelight
            (?> light
              # ondevicemotion
              | motion
              # ondeviceorientation
              | orientation
              # ondeviceorientationabsolute
              | orientationabsolute
              # ondevice$roximity
              | proximity
            )
          | onerror
          | onfocus
          # ongamepadconnected, ongamepaddisconnected
          | ongamepad(?>connected|disconnected)
          | ongotpointercapture
          | onhashchange
          | oninput
          # onkeydown, onkeypress, onkeyup
          | onkey(?>down|press|up)
          | onlanguagechange
          # onload, onloadend, onloadstart
          | onload(?>end|start)?
          | onlostpointercapture
          | onmessage
          | onmessageerror
          # onmousedown, onmousemove, onmouseout, onmouseover, onmouseup
          | onmouse(?>down|move|out|over|up)
          | onpointer
            # onpointercancel
            (?> cancel
              # onpointerenter
              | enter
              # onpointerleave
              | leave
              # onpointermove
              | move
              # onpointerout
              | out
              # onpointerover
              | over
              # onpointerup
              | up
            )
          | onpopstate
          | onrejectionhandled
          | onreset
          | onresize
          | onscroll
          | onselect
          | onselectionchange
          | onselectstart
          | onstorage
          | onsubmit
          # ontouchcancel, ontouchmove, ontouchstart
          | ontouch(?>cancel|move|start)
          # ontransitioncancel, ontransitionend
          | ontransition(?>cancel|end)
          | onunhandledrejection
          | onunload
          | onuserproximity
          | onvrdisplay
            # onvrdisplayactivate
            (?> activate
              # onvrdisplayblur
              | blur
              # onvrdisplayconnect
              | connect
              # onvrdisplaydeactivate
              | deactivate
              # onvrdisplaydisconnect
              | disconnect
              # onvrdisplayfocus
              | focus
              # onvrdisplaypresentchange
              | presentchange
            )
          | onwheel
          | opener
          | origin
          # outerHeight, outerWidth
          | outer(?>Height|Width)
          | pageYOffset
          | parent
          | performance
          | personalbar
          # screen, screenX, screenY
          | screen[XY]?
          | scroll
            # scrollbars
            (?> bars
              # scrollX, scrollY
              | [XY]
            )
          | self
          | sessionStorage
          | speechSynthesis
          # status, statusbar
          | status(?:bar)?
          | toolbar
          | top
          | URL
          | visualViewport
          | window
        )\b
      scope: support.variable.js.fjsx15
      pop: 'True'
    - include: 183_other-property-or-function
  Naomi/integration/syntaxes/src/js/jest.yml:
    - match: (jest)\s*(\.)
      captures:
        1: support.type.object.jest.js.fjsx15
        2: punctuation.accessor.js.fjsx15
      set:
        - 184_jest-property-or-function
    - match: |
        (?x)
        (?> after(?>All|Each)
          | before(?>All|Each)
          | describe
          | it
          | test
        )\b
        (?=
          (?> \.(?>each|only|skip)
            | \s*\(
          )
        )
      scope: support.function.jest.fn.js.fjsx15
      set:
        - 184_meta-scope
        - 184_arguments
        - 184_optional-each-skip-only
    - match: expect\b
      scope: support.function.jest.js.fjsx15
      set:
        - 184_expect-chain
  184_accessor-no-pop:
    - match: \.
      scope: punctuation.accessor.js.fjsx15
  184_arguments:
    - include: Naomi/integration/syntaxes/src/js/function-call/arguments.yml
  184_else-pop:
    - match: (?=\S)
      pop: 'True'
  184_expect-chain:
    - include: 184_accessor-no-pop
    - match: (?=\s*\()
      push:
        - 184_meta-scope
        - 184_arguments
    - match: (?>not|resolves|rejects)\b
      scope: support.type.object.jest.matcher.other.js.fjsx15
    - match: |
        (?x)
        to
        (?> Be
            (?> Called
              | CloseTo
              | Defined
              | Falsy
              | GreaterThan(?:OrEqual)?
              | InstanceOf
              | LessThan(?:OrEqual)?
              | Null
              | Truthy
              | Undefined
            )?
          | Contain(?:Equal)?
          | Equal
          | Have
            (?> Been
                (?> Called(?>Times|With)?
                  | LastCalledWith
                  | NthCalledWith
                )
              | LastReturnedWith
              | NthReturnedWith
              | Returned(?>Times|With)?
            )
          | Have(?>Length|Property)
          | Match(?:Object|(?:Inline)?Snapshot)?
          | StrictEqual
          | Throw(?:Error(?:Matching(?:Inline)?Snapshot)?)?
        )\b
        (?=\s*\()
      scope: support.function.jest.matcher.fjsx15
      set:
        - 184_matcher-meta-scope
        - 184_arguments
    - match: |
        (?x)
        (?> addSnapshotSerializer
          | any(?:thing)?
          | array(?:Containing)?
          | assertions
          | extend
          | hasAssertions
          | objectContaining
          | string(?>Containing|Matching)
        )\b
        (?=\s*\()
      scope: support.function.jest.matcher.fjsx15
      set:
        - 184_meta-scope
        - 184_arguments
    - include: 184_else-pop
  184_jest-property-or-function:
    - match: \b(?>advanceTimersByTime|clearAll(?>Mocks|Timers)|d(?>isableAutomock|o(?>Mock|ntMock))|enableAutomock|fn|genMockFromModule|isMockFunction|mock|r(?>es(?>et(?>AllMocks|Modules)|toreAllMocks)|un(?>AllTi(?>cks|mers)|OnlyPendingTimers))|s(?>et(?>Mock|Timeout)|pyOn)|u(?>nmock|se(?>FakeTimers|RealTimers)))\b(?=\s*\()
      scope: support.function.jest.js.fjsx15
      set:
        - 184_meta-scope
        - 184_arguments
    - include: 184_else-pop
  184_matcher-meta-scope:
    - meta_scope: meta.function-call.jest.matcher.js.fjsx15
    - include: 184_pop-now
  184_meta-scope:
    - meta_scope: meta.function-call.jest.js.fjsx15
    - include: 184_pop-now
  184_optional-each-skip-only:
    - include: 184_accessor-no-pop
    - match: each\b
      scope: support.function.jest.each.js.fjsx15
      pop: 'True'
    - match: only\b
      scope: support.function.jest.only.js.fjsx15
      pop: 'True'
    - match: skip\b
      scope: support.function.jest.skip.js.fjsx15
      pop: 'True'
    - include: 184_else-pop
  184_pop-now:
    - match: ''
      pop: 'True'
  Naomi/integration/syntaxes/src/js/operator/comma.yml:
    - match: \,
      scope: keyword.operator.comma.js.fjsx15
      set:
        - 185_optional-expression
  185_optional-expression:
    - include: Naomi/integration/syntaxes/src/js/optional-expression.yml
  Naomi/integration/syntaxes/src/js/index.yml:
    - match: ''
      push:
        - 186_naomi
        - 186_entry
  186_entry:
    - include: Naomi/integration/syntaxes/src/js/comment/index.yml
    - include: Naomi/integration/syntaxes/src/js/statement.yml
    - include: Naomi/integration/syntaxes/src/js/expression.yml
  186_naomi:
    - meta_scope: naomi
    - match: ''
      pop: 'True'
