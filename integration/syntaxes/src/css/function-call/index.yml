%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

variables:
  cssIdentifier: (?!--)[_[:alpha:]\-][_[:alnum:]\-]*

contexts:
  main:
    - include: calc
    - include: domain
    - include: regexp
    - include: url-and-url-prefix
    - include: var
    - include: other
    - include: fallback

  arg-begin:
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      pop: true

  arg-close:
    - match: \)
      scope: punctuation.section.group.close.css.css3
      pop: true

  arguments:
    - include: ~/css/function-call/arguments

  calc:
    - match: calc(?=\s*\()
      scope: support.function.css.css3
      set: [ meta, calc-arg-close, arg-begin ]

  calc-arg-close:
    - include: comma-no-pop
    - include: arg-close
    - match: (?=\S)
      push: [ calc-optional-tail, calc-optional-head ]

  calc-close-group:
    - match: \)
      scope: punctuation.section.group.end.css.css3
      pop: true

  calc-optional-head:
    # Group begin.
    - match: \(
      scope: punctuation.section.group.begin.css.css3
      push: [
        meta-group,
        calc-close-group,
        calc-optional-tail,
        calc-optional-head
      ]
    # Value.
    - include: ~/css/value
    - include: else-pop

  calc-optional-tail:
    - match: "[+\\-*/]"
      scope: keyword.operator.arithmetic.css.css3
      set: calc-optional-head
    - include: else-pop

  comma-no-pop:
    - match: \,
      scope: punctuation.separator.comma.css.css3

  domain:
    - match: domain(?=\s*\()
      scope: support.function.domain.css.css3
      set: [ meta, arg-close, url-argument, arg-begin ]

  else-pop:
    - match: (?=\S)
      pop: true

  fallback:
    - match: |
        (?xi)
        (?=
          {{cssIdentifier}}
          \s*\(
        )
      set: [ meta, arguments, identifier ]

  identifier:
    - match: (?xi){{cssIdentifier}}
      scope: variable.function.css.css3
      pop: true

  meta:
    - meta_scope: >-
        meta.function-call.css.css3
        meta.group.css.css3
    - include: pop-now

  meta-group:
    - meta_scope: meta.group.css.css3
    - include: pop-now

  optional-var-value:
    - include: ~/css/property#custom
    - include: ~/css/value
    - include: else-pop

  other:
    - match: |
        (?x)
        (?> attr
          | blur
          | cubic-bezier
          | format
          | gray
          | hsla?
          | hwb
          | image-set
          | linear-gradient
          | polygon
          | radial-gradient
          | repeating-(?>linear|radial)-gradient
          | repeat
          | rotate
          | rgba?
        )
        (?=\s*\()
      scope: support.function.css.css3
      set: [ meta, arguments ]

  pop-now:
    - match: ""
      pop: true

  quoted-string:
    - include: ~/css/literal/string/double-quoted
    - include: ~/css/literal/string/single-quoted

  regexp:
    - match: regexp(?=\s*\()
      scope: support.function.regexp.css.css3
      set: [ meta, arg-close, quoted-string, arg-begin ]

  url-and-url-prefix:
    - match: url-prefix(?=\s*\()
      scope: support.function.url-prefix.css.css3
      set: [ meta, arg-close, url-argument, arg-begin ]
    - match: url(?=\s*\()
      scope: support.function.url.css.css3
      set: [ meta, arg-close, url-argument, arg-begin ]

  url-argument:
    - match: (?=\))
      pop: true
    - include: quoted-string
    - match: |
        (?x)
        (?> \\["'()\s]
          | [^"'()\s]
        )
      scope: string.unquoted.css.css3

  var:
    - match: var(?=\s*\()
      scope: support.function.regexp.css.css3
      set: [ meta, var-arg-close, arg-begin ]

  var-arg-close:
    - include: comma-no-pop
    - include: arg-close
    - match: (?=\S)
      push: optional-var-value
